/* 
 * IX.FE API V3.1
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v3.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Represent a taken over notification
    /// </summary>
    [DataContract]
    public partial class ReceptionTakenOverNotification :  IEquatable<ReceptionTakenOverNotification>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ReceptionTakenOverNotification" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ReceptionTakenOverNotification() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ReceptionTakenOverNotification" /> class.
        /// </summary>
        /// <param name="sellerProvider">Represent the Seller Provider (Cedente Prestatore) (required).</param>
        /// <param name="profiles">Invoice profiles.</param>
        /// <param name="metadata">Invoice metadata.</param>
        /// <param name="deliveryDate">Represent the delivery receipt date and time (required).</param>
        public ReceptionTakenOverNotification(ReceptionSellerProvider sellerProvider = default(ReceptionSellerProvider), List<ReceptionProfile> profiles = default(List<ReceptionProfile>), List<ReceptionMetadata> metadata = default(List<ReceptionMetadata>), DateTime? deliveryDate = default(DateTime?))
        {
            // to ensure "sellerProvider" is required (not null)
            if (sellerProvider == null)
            {
                throw new InvalidDataException("sellerProvider is a required property for ReceptionTakenOverNotification and cannot be null");
            }
            else
            {
                this.SellerProvider = sellerProvider;
            }
            // to ensure "deliveryDate" is required (not null)
            if (deliveryDate == null)
            {
                throw new InvalidDataException("deliveryDate is a required property for ReceptionTakenOverNotification and cannot be null");
            }
            else
            {
                this.DeliveryDate = deliveryDate;
            }
            this.Profiles = profiles;
            this.Metadata = metadata;
        }
        
        /// <summary>
        /// Represent the Seller Provider (Cedente Prestatore)
        /// </summary>
        /// <value>Represent the Seller Provider (Cedente Prestatore)</value>
        [DataMember(Name="sellerProvider", EmitDefaultValue=false)]
        public ReceptionSellerProvider SellerProvider { get; set; }

        /// <summary>
        /// Invoice profiles
        /// </summary>
        /// <value>Invoice profiles</value>
        [DataMember(Name="profiles", EmitDefaultValue=false)]
        public List<ReceptionProfile> Profiles { get; set; }

        /// <summary>
        /// Invoice metadata
        /// </summary>
        /// <value>Invoice metadata</value>
        [DataMember(Name="metadata", EmitDefaultValue=false)]
        public List<ReceptionMetadata> Metadata { get; set; }

        /// <summary>
        /// Represent the delivery receipt date and time
        /// </summary>
        /// <value>Represent the delivery receipt date and time</value>
        [DataMember(Name="deliveryDate", EmitDefaultValue=false)]
        public DateTime? DeliveryDate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ReceptionTakenOverNotification {\n");
            sb.Append("  SellerProvider: ").Append(SellerProvider).Append("\n");
            sb.Append("  Profiles: ").Append(Profiles).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("  DeliveryDate: ").Append(DeliveryDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ReceptionTakenOverNotification);
        }

        /// <summary>
        /// Returns true if ReceptionTakenOverNotification instances are equal
        /// </summary>
        /// <param name="input">Instance of ReceptionTakenOverNotification to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ReceptionTakenOverNotification input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.SellerProvider == input.SellerProvider ||
                    (this.SellerProvider != null &&
                    this.SellerProvider.Equals(input.SellerProvider))
                ) && 
                (
                    this.Profiles == input.Profiles ||
                    this.Profiles != null &&
                    this.Profiles.SequenceEqual(input.Profiles)
                ) && 
                (
                    this.Metadata == input.Metadata ||
                    this.Metadata != null &&
                    this.Metadata.SequenceEqual(input.Metadata)
                ) && 
                (
                    this.DeliveryDate == input.DeliveryDate ||
                    (this.DeliveryDate != null &&
                    this.DeliveryDate.Equals(input.DeliveryDate))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SellerProvider != null)
                    hashCode = hashCode * 59 + this.SellerProvider.GetHashCode();
                if (this.Profiles != null)
                    hashCode = hashCode * 59 + this.Profiles.GetHashCode();
                if (this.Metadata != null)
                    hashCode = hashCode * 59 + this.Metadata.GetHashCode();
                if (this.DeliveryDate != null)
                    hashCode = hashCode * 59 + this.DeliveryDate.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
