/* 
 * IX.FE API V3.1
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v3.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Represent a conservation sent notification
    /// </summary>
    [DataContract]
    public partial class ReceptionConservationSentNotification :  IEquatable<ReceptionConservationSentNotification>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ReceptionConservationSentNotification" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ReceptionConservationSentNotification() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ReceptionConservationSentNotification" /> class.
        /// </summary>
        /// <param name="identificativoVersamento">Identificativo Versamento conservazione (required).</param>
        /// <param name="identificativoDocumento">Identificativo Documento versamento conservazione (required).</param>
        public ReceptionConservationSentNotification(string identificativoVersamento = default(string), string identificativoDocumento = default(string))
        {
            // to ensure "identificativoVersamento" is required (not null)
            if (identificativoVersamento == null)
            {
                throw new InvalidDataException("identificativoVersamento is a required property for ReceptionConservationSentNotification and cannot be null");
            }
            else
            {
                this.IdentificativoVersamento = identificativoVersamento;
            }
            // to ensure "identificativoDocumento" is required (not null)
            if (identificativoDocumento == null)
            {
                throw new InvalidDataException("identificativoDocumento is a required property for ReceptionConservationSentNotification and cannot be null");
            }
            else
            {
                this.IdentificativoDocumento = identificativoDocumento;
            }
        }
        
        /// <summary>
        /// Identificativo Versamento conservazione
        /// </summary>
        /// <value>Identificativo Versamento conservazione</value>
        [DataMember(Name="identificativoVersamento", EmitDefaultValue=false)]
        public string IdentificativoVersamento { get; set; }

        /// <summary>
        /// Identificativo Documento versamento conservazione
        /// </summary>
        /// <value>Identificativo Documento versamento conservazione</value>
        [DataMember(Name="identificativoDocumento", EmitDefaultValue=false)]
        public string IdentificativoDocumento { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ReceptionConservationSentNotification {\n");
            sb.Append("  IdentificativoVersamento: ").Append(IdentificativoVersamento).Append("\n");
            sb.Append("  IdentificativoDocumento: ").Append(IdentificativoDocumento).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ReceptionConservationSentNotification);
        }

        /// <summary>
        /// Returns true if ReceptionConservationSentNotification instances are equal
        /// </summary>
        /// <param name="input">Instance of ReceptionConservationSentNotification to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ReceptionConservationSentNotification input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.IdentificativoVersamento == input.IdentificativoVersamento ||
                    (this.IdentificativoVersamento != null &&
                    this.IdentificativoVersamento.Equals(input.IdentificativoVersamento))
                ) && 
                (
                    this.IdentificativoDocumento == input.IdentificativoDocumento ||
                    (this.IdentificativoDocumento != null &&
                    this.IdentificativoDocumento.Equals(input.IdentificativoDocumento))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.IdentificativoVersamento != null)
                    hashCode = hashCode * 59 + this.IdentificativoVersamento.GetHashCode();
                if (this.IdentificativoDocumento != null)
                    hashCode = hashCode * 59 + this.IdentificativoDocumento.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
