/* 
 * IX.FE API V3.1
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v3.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Represent an notification message.
    /// </summary>
    [DataContract]
    public partial class ReceptionNotification :  IEquatable<ReceptionNotification>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ReceptionNotification" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ReceptionNotification() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ReceptionNotification" /> class.
        /// </summary>
        /// <param name="utcDate">The notification message creation date in Utc. (required).</param>
        /// <param name="invoiceUID">The invoce unique identifier. (required).</param>
        /// <param name="profileUID">The profile unique identifier..</param>
        /// <param name="invoiceType">The invoice type..</param>
        /// <param name="exchangeSystemUID">The exchange system unique identifier assigned to invoice. (required).</param>
        /// <param name="invoiceReceiverCode">The invoice receiver code.</param>
        /// <param name="metadataReceiverCode">The metadata receiver code.</param>
        /// <param name="invoiceCompilerCode">The invoice compiler code (Soggetto Compilatore).</param>
        /// <param name="invoiceNotificationUID">The invoce notification identifier. (required).</param>
        /// <param name="notificationType">The notification type. (required).</param>
        /// <param name="takenOver">Taken over notification.</param>
        /// <param name="paNotifications">PA Notifications.</param>
        /// <param name="conservationSent">sent to conservation notification.</param>
        /// <param name="message">A message related..</param>
        /// <param name="metadata">Invoice metadata.</param>
        public ReceptionNotification(DateTime? utcDate = default(DateTime?), string invoiceUID = default(string), int? profileUID = default(int?), string invoiceType = default(string), string exchangeSystemUID = default(string), string invoiceReceiverCode = default(string), string metadataReceiverCode = default(string), string invoiceCompilerCode = default(string), string invoiceNotificationUID = default(string), string notificationType = default(string), ReceptionTakenOverNotification takenOver = default(ReceptionTakenOverNotification), ReceptionPANotification paNotifications = default(ReceptionPANotification), ReceptionConservationSentNotification conservationSent = default(ReceptionConservationSentNotification), string message = default(string), List<ReceptionMetadata> metadata = default(List<ReceptionMetadata>))
        {
            // to ensure "utcDate" is required (not null)
            if (utcDate == null)
            {
                throw new InvalidDataException("utcDate is a required property for ReceptionNotification and cannot be null");
            }
            else
            {
                this.UtcDate = utcDate;
            }
            // to ensure "invoiceUID" is required (not null)
            if (invoiceUID == null)
            {
                throw new InvalidDataException("invoiceUID is a required property for ReceptionNotification and cannot be null");
            }
            else
            {
                this.InvoiceUID = invoiceUID;
            }
            // to ensure "exchangeSystemUID" is required (not null)
            if (exchangeSystemUID == null)
            {
                throw new InvalidDataException("exchangeSystemUID is a required property for ReceptionNotification and cannot be null");
            }
            else
            {
                this.ExchangeSystemUID = exchangeSystemUID;
            }
            // to ensure "invoiceNotificationUID" is required (not null)
            if (invoiceNotificationUID == null)
            {
                throw new InvalidDataException("invoiceNotificationUID is a required property for ReceptionNotification and cannot be null");
            }
            else
            {
                this.InvoiceNotificationUID = invoiceNotificationUID;
            }
            // to ensure "notificationType" is required (not null)
            if (notificationType == null)
            {
                throw new InvalidDataException("notificationType is a required property for ReceptionNotification and cannot be null");
            }
            else
            {
                this.NotificationType = notificationType;
            }
            this.ProfileUID = profileUID;
            this.InvoiceType = invoiceType;
            this.InvoiceReceiverCode = invoiceReceiverCode;
            this.MetadataReceiverCode = metadataReceiverCode;
            this.InvoiceCompilerCode = invoiceCompilerCode;
            this.TakenOver = takenOver;
            this.PaNotifications = paNotifications;
            this.ConservationSent = conservationSent;
            this.Message = message;
            this.Metadata = metadata;
        }
        
        /// <summary>
        /// The notification message creation date in Utc.
        /// </summary>
        /// <value>The notification message creation date in Utc.</value>
        [DataMember(Name="utcDate", EmitDefaultValue=false)]
        public DateTime? UtcDate { get; set; }

        /// <summary>
        /// The invoce unique identifier.
        /// </summary>
        /// <value>The invoce unique identifier.</value>
        [DataMember(Name="invoiceUID", EmitDefaultValue=false)]
        public string InvoiceUID { get; set; }

        /// <summary>
        /// The profile unique identifier.
        /// </summary>
        /// <value>The profile unique identifier.</value>
        [DataMember(Name="profileUID", EmitDefaultValue=false)]
        public int? ProfileUID { get; set; }

        /// <summary>
        /// The invoice type.
        /// </summary>
        /// <value>The invoice type.</value>
        [DataMember(Name="invoiceType", EmitDefaultValue=false)]
        public string InvoiceType { get; set; }

        /// <summary>
        /// The exchange system unique identifier assigned to invoice.
        /// </summary>
        /// <value>The exchange system unique identifier assigned to invoice.</value>
        [DataMember(Name="exchangeSystemUID", EmitDefaultValue=false)]
        public string ExchangeSystemUID { get; set; }

        /// <summary>
        /// The invoice receiver code
        /// </summary>
        /// <value>The invoice receiver code</value>
        [DataMember(Name="invoiceReceiverCode", EmitDefaultValue=false)]
        public string InvoiceReceiverCode { get; set; }

        /// <summary>
        /// The metadata receiver code
        /// </summary>
        /// <value>The metadata receiver code</value>
        [DataMember(Name="metadataReceiverCode", EmitDefaultValue=false)]
        public string MetadataReceiverCode { get; set; }

        /// <summary>
        /// The invoice compiler code (Soggetto Compilatore)
        /// </summary>
        /// <value>The invoice compiler code (Soggetto Compilatore)</value>
        [DataMember(Name="invoiceCompilerCode", EmitDefaultValue=false)]
        public string InvoiceCompilerCode { get; set; }

        /// <summary>
        /// The invoce notification identifier.
        /// </summary>
        /// <value>The invoce notification identifier.</value>
        [DataMember(Name="invoiceNotificationUID", EmitDefaultValue=false)]
        public string InvoiceNotificationUID { get; set; }

        /// <summary>
        /// The notification type.
        /// </summary>
        /// <value>The notification type.</value>
        [DataMember(Name="notificationType", EmitDefaultValue=false)]
        public string NotificationType { get; set; }

        /// <summary>
        /// Taken over notification
        /// </summary>
        /// <value>Taken over notification</value>
        [DataMember(Name="takenOver", EmitDefaultValue=false)]
        public ReceptionTakenOverNotification TakenOver { get; set; }

        /// <summary>
        /// PA Notifications
        /// </summary>
        /// <value>PA Notifications</value>
        [DataMember(Name="paNotifications", EmitDefaultValue=false)]
        public ReceptionPANotification PaNotifications { get; set; }

        /// <summary>
        /// sent to conservation notification
        /// </summary>
        /// <value>sent to conservation notification</value>
        [DataMember(Name="conservationSent", EmitDefaultValue=false)]
        public ReceptionConservationSentNotification ConservationSent { get; set; }

        /// <summary>
        /// A message related.
        /// </summary>
        /// <value>A message related.</value>
        [DataMember(Name="message", EmitDefaultValue=false)]
        public string Message { get; set; }

        /// <summary>
        /// Invoice metadata
        /// </summary>
        /// <value>Invoice metadata</value>
        [DataMember(Name="metadata", EmitDefaultValue=false)]
        public List<ReceptionMetadata> Metadata { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ReceptionNotification {\n");
            sb.Append("  UtcDate: ").Append(UtcDate).Append("\n");
            sb.Append("  InvoiceUID: ").Append(InvoiceUID).Append("\n");
            sb.Append("  ProfileUID: ").Append(ProfileUID).Append("\n");
            sb.Append("  InvoiceType: ").Append(InvoiceType).Append("\n");
            sb.Append("  ExchangeSystemUID: ").Append(ExchangeSystemUID).Append("\n");
            sb.Append("  InvoiceReceiverCode: ").Append(InvoiceReceiverCode).Append("\n");
            sb.Append("  MetadataReceiverCode: ").Append(MetadataReceiverCode).Append("\n");
            sb.Append("  InvoiceCompilerCode: ").Append(InvoiceCompilerCode).Append("\n");
            sb.Append("  InvoiceNotificationUID: ").Append(InvoiceNotificationUID).Append("\n");
            sb.Append("  NotificationType: ").Append(NotificationType).Append("\n");
            sb.Append("  TakenOver: ").Append(TakenOver).Append("\n");
            sb.Append("  PaNotifications: ").Append(PaNotifications).Append("\n");
            sb.Append("  ConservationSent: ").Append(ConservationSent).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ReceptionNotification);
        }

        /// <summary>
        /// Returns true if ReceptionNotification instances are equal
        /// </summary>
        /// <param name="input">Instance of ReceptionNotification to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ReceptionNotification input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.UtcDate == input.UtcDate ||
                    (this.UtcDate != null &&
                    this.UtcDate.Equals(input.UtcDate))
                ) && 
                (
                    this.InvoiceUID == input.InvoiceUID ||
                    (this.InvoiceUID != null &&
                    this.InvoiceUID.Equals(input.InvoiceUID))
                ) && 
                (
                    this.ProfileUID == input.ProfileUID ||
                    (this.ProfileUID != null &&
                    this.ProfileUID.Equals(input.ProfileUID))
                ) && 
                (
                    this.InvoiceType == input.InvoiceType ||
                    (this.InvoiceType != null &&
                    this.InvoiceType.Equals(input.InvoiceType))
                ) && 
                (
                    this.ExchangeSystemUID == input.ExchangeSystemUID ||
                    (this.ExchangeSystemUID != null &&
                    this.ExchangeSystemUID.Equals(input.ExchangeSystemUID))
                ) && 
                (
                    this.InvoiceReceiverCode == input.InvoiceReceiverCode ||
                    (this.InvoiceReceiverCode != null &&
                    this.InvoiceReceiverCode.Equals(input.InvoiceReceiverCode))
                ) && 
                (
                    this.MetadataReceiverCode == input.MetadataReceiverCode ||
                    (this.MetadataReceiverCode != null &&
                    this.MetadataReceiverCode.Equals(input.MetadataReceiverCode))
                ) && 
                (
                    this.InvoiceCompilerCode == input.InvoiceCompilerCode ||
                    (this.InvoiceCompilerCode != null &&
                    this.InvoiceCompilerCode.Equals(input.InvoiceCompilerCode))
                ) && 
                (
                    this.InvoiceNotificationUID == input.InvoiceNotificationUID ||
                    (this.InvoiceNotificationUID != null &&
                    this.InvoiceNotificationUID.Equals(input.InvoiceNotificationUID))
                ) && 
                (
                    this.NotificationType == input.NotificationType ||
                    (this.NotificationType != null &&
                    this.NotificationType.Equals(input.NotificationType))
                ) && 
                (
                    this.TakenOver == input.TakenOver ||
                    (this.TakenOver != null &&
                    this.TakenOver.Equals(input.TakenOver))
                ) && 
                (
                    this.PaNotifications == input.PaNotifications ||
                    (this.PaNotifications != null &&
                    this.PaNotifications.Equals(input.PaNotifications))
                ) && 
                (
                    this.ConservationSent == input.ConservationSent ||
                    (this.ConservationSent != null &&
                    this.ConservationSent.Equals(input.ConservationSent))
                ) && 
                (
                    this.Message == input.Message ||
                    (this.Message != null &&
                    this.Message.Equals(input.Message))
                ) && 
                (
                    this.Metadata == input.Metadata ||
                    this.Metadata != null &&
                    this.Metadata.SequenceEqual(input.Metadata)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.UtcDate != null)
                    hashCode = hashCode * 59 + this.UtcDate.GetHashCode();
                if (this.InvoiceUID != null)
                    hashCode = hashCode * 59 + this.InvoiceUID.GetHashCode();
                if (this.ProfileUID != null)
                    hashCode = hashCode * 59 + this.ProfileUID.GetHashCode();
                if (this.InvoiceType != null)
                    hashCode = hashCode * 59 + this.InvoiceType.GetHashCode();
                if (this.ExchangeSystemUID != null)
                    hashCode = hashCode * 59 + this.ExchangeSystemUID.GetHashCode();
                if (this.InvoiceReceiverCode != null)
                    hashCode = hashCode * 59 + this.InvoiceReceiverCode.GetHashCode();
                if (this.MetadataReceiverCode != null)
                    hashCode = hashCode * 59 + this.MetadataReceiverCode.GetHashCode();
                if (this.InvoiceCompilerCode != null)
                    hashCode = hashCode * 59 + this.InvoiceCompilerCode.GetHashCode();
                if (this.InvoiceNotificationUID != null)
                    hashCode = hashCode * 59 + this.InvoiceNotificationUID.GetHashCode();
                if (this.NotificationType != null)
                    hashCode = hashCode * 59 + this.NotificationType.GetHashCode();
                if (this.TakenOver != null)
                    hashCode = hashCode * 59 + this.TakenOver.GetHashCode();
                if (this.PaNotifications != null)
                    hashCode = hashCode * 59 + this.PaNotifications.GetHashCode();
                if (this.ConservationSent != null)
                    hashCode = hashCode * 59 + this.ConservationSent.GetHashCode();
                if (this.Message != null)
                    hashCode = hashCode * 59 + this.Message.GetHashCode();
                if (this.Metadata != null)
                    hashCode = hashCode * 59 + this.Metadata.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
