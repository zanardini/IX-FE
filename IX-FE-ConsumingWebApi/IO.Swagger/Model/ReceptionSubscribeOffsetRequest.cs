/* 
 * IX.FE API V3.1
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v3.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Represent the Subscription offset request.
    /// </summary>
    [DataContract]
    public partial class ReceptionSubscribeOffsetRequest :  IEquatable<ReceptionSubscribeOffsetRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ReceptionSubscribeOffsetRequest" /> class.
        /// </summary>
        /// <param name="invoiceNotificationUIDOffset">Change the subscription offset pointing to an invoice notification unique identifier, if found.  Notifications are available since 90 days.  If specified, the field InvoiceNotificationUtcDateOffset must be null..</param>
        /// <param name="invoiceNotificationUtcDateOffset">Change the subscription offset pointing to the first invoice notification filtered by date.  Notifications are available since 90 days.  If specified, the field invoiceNotificationUIDOffset must be null..</param>
        public ReceptionSubscribeOffsetRequest(string invoiceNotificationUIDOffset = default(string), DateTime? invoiceNotificationUtcDateOffset = default(DateTime?))
        {
            this.InvoiceNotificationUIDOffset = invoiceNotificationUIDOffset;
            this.InvoiceNotificationUtcDateOffset = invoiceNotificationUtcDateOffset;
        }
        
        /// <summary>
        /// Change the subscription offset pointing to an invoice notification unique identifier, if found.  Notifications are available since 90 days.  If specified, the field InvoiceNotificationUtcDateOffset must be null.
        /// </summary>
        /// <value>Change the subscription offset pointing to an invoice notification unique identifier, if found.  Notifications are available since 90 days.  If specified, the field InvoiceNotificationUtcDateOffset must be null.</value>
        [DataMember(Name="invoiceNotificationUIDOffset", EmitDefaultValue=false)]
        public string InvoiceNotificationUIDOffset { get; set; }

        /// <summary>
        /// Change the subscription offset pointing to the first invoice notification filtered by date.  Notifications are available since 90 days.  If specified, the field invoiceNotificationUIDOffset must be null.
        /// </summary>
        /// <value>Change the subscription offset pointing to the first invoice notification filtered by date.  Notifications are available since 90 days.  If specified, the field invoiceNotificationUIDOffset must be null.</value>
        [DataMember(Name="invoiceNotificationUtcDateOffset", EmitDefaultValue=false)]
        public DateTime? InvoiceNotificationUtcDateOffset { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ReceptionSubscribeOffsetRequest {\n");
            sb.Append("  InvoiceNotificationUIDOffset: ").Append(InvoiceNotificationUIDOffset).Append("\n");
            sb.Append("  InvoiceNotificationUtcDateOffset: ").Append(InvoiceNotificationUtcDateOffset).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ReceptionSubscribeOffsetRequest);
        }

        /// <summary>
        /// Returns true if ReceptionSubscribeOffsetRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of ReceptionSubscribeOffsetRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ReceptionSubscribeOffsetRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.InvoiceNotificationUIDOffset == input.InvoiceNotificationUIDOffset ||
                    (this.InvoiceNotificationUIDOffset != null &&
                    this.InvoiceNotificationUIDOffset.Equals(input.InvoiceNotificationUIDOffset))
                ) && 
                (
                    this.InvoiceNotificationUtcDateOffset == input.InvoiceNotificationUtcDateOffset ||
                    (this.InvoiceNotificationUtcDateOffset != null &&
                    this.InvoiceNotificationUtcDateOffset.Equals(input.InvoiceNotificationUtcDateOffset))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.InvoiceNotificationUIDOffset != null)
                    hashCode = hashCode * 59 + this.InvoiceNotificationUIDOffset.GetHashCode();
                if (this.InvoiceNotificationUtcDateOffset != null)
                    hashCode = hashCode * 59 + this.InvoiceNotificationUtcDateOffset.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
