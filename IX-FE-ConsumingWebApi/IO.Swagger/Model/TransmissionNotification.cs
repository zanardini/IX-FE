/* 
 * IX.FE API V3.1
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v3.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Represent a notification message.
    /// </summary>
    [DataContract]
    public partial class TransmissionNotification :  IEquatable<TransmissionNotification>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TransmissionNotification" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TransmissionNotification() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TransmissionNotification" /> class.
        /// </summary>
        /// <param name="utcDate">The notification message creation date in Utc. (required).</param>
        /// <param name="invoiceUID">The invoce unique identifier. (required).</param>
        /// <param name="profileUID">The profile unique identifier..</param>
        /// <param name="invoiceType">The invoice type..</param>
        /// <param name="externalId">The invoice external identifier..</param>
        /// <param name="exchangeSystemUID">The exchange system unique identifier assigned to invoice. (required).</param>
        /// <param name="invoiceNotificationUID">The invoce notification identifier. (required).</param>
        /// <param name="invoiceCompilerCode">The invoice compiler code.</param>
        /// <param name="isActive">Specifies if the invoce is active for the Aoo..</param>
        /// <param name="notificationType">The notification type. (required).</param>
        /// <param name="validationError">Validation error notification.</param>
        /// <param name="paNotifications">PA Notifications.</param>
        /// <param name="b2bNotifications">B2B Notifications.</param>
        /// <param name="conservationSent">sent to conservation notification.</param>
        /// <param name="message">A message related..</param>
        /// <param name="metadata">Invoice metadata.</param>
        public TransmissionNotification(DateTime? utcDate = default(DateTime?), string invoiceUID = default(string), int? profileUID = default(int?), string invoiceType = default(string), string externalId = default(string), string exchangeSystemUID = default(string), string invoiceNotificationUID = default(string), string invoiceCompilerCode = default(string), bool? isActive = default(bool?), string notificationType = default(string), TransmissionValidationErrorNotification validationError = default(TransmissionValidationErrorNotification), TransmissionPANotification paNotifications = default(TransmissionPANotification), TransmissionB2BNotification b2bNotifications = default(TransmissionB2BNotification), TransmissionConservationSentNotification conservationSent = default(TransmissionConservationSentNotification), string message = default(string), List<TransmissionMetadata> metadata = default(List<TransmissionMetadata>))
        {
            // to ensure "utcDate" is required (not null)
            if (utcDate == null)
            {
                throw new InvalidDataException("utcDate is a required property for TransmissionNotification and cannot be null");
            }
            else
            {
                this.UtcDate = utcDate;
            }
            // to ensure "invoiceUID" is required (not null)
            if (invoiceUID == null)
            {
                throw new InvalidDataException("invoiceUID is a required property for TransmissionNotification and cannot be null");
            }
            else
            {
                this.InvoiceUID = invoiceUID;
            }
            // to ensure "exchangeSystemUID" is required (not null)
            if (exchangeSystemUID == null)
            {
                throw new InvalidDataException("exchangeSystemUID is a required property for TransmissionNotification and cannot be null");
            }
            else
            {
                this.ExchangeSystemUID = exchangeSystemUID;
            }
            // to ensure "invoiceNotificationUID" is required (not null)
            if (invoiceNotificationUID == null)
            {
                throw new InvalidDataException("invoiceNotificationUID is a required property for TransmissionNotification and cannot be null");
            }
            else
            {
                this.InvoiceNotificationUID = invoiceNotificationUID;
            }
            // to ensure "notificationType" is required (not null)
            if (notificationType == null)
            {
                throw new InvalidDataException("notificationType is a required property for TransmissionNotification and cannot be null");
            }
            else
            {
                this.NotificationType = notificationType;
            }
            this.ProfileUID = profileUID;
            this.InvoiceType = invoiceType;
            this.ExternalId = externalId;
            this.InvoiceCompilerCode = invoiceCompilerCode;
            this.IsActive = isActive;
            this.ValidationError = validationError;
            this.PaNotifications = paNotifications;
            this.B2bNotifications = b2bNotifications;
            this.ConservationSent = conservationSent;
            this.Message = message;
            this.Metadata = metadata;
        }
        
        /// <summary>
        /// The notification message creation date in Utc.
        /// </summary>
        /// <value>The notification message creation date in Utc.</value>
        [DataMember(Name="utcDate", EmitDefaultValue=false)]
        public DateTime? UtcDate { get; set; }

        /// <summary>
        /// The invoce unique identifier.
        /// </summary>
        /// <value>The invoce unique identifier.</value>
        [DataMember(Name="invoiceUID", EmitDefaultValue=false)]
        public string InvoiceUID { get; set; }

        /// <summary>
        /// The profile unique identifier.
        /// </summary>
        /// <value>The profile unique identifier.</value>
        [DataMember(Name="profileUID", EmitDefaultValue=false)]
        public int? ProfileUID { get; set; }

        /// <summary>
        /// The invoice type.
        /// </summary>
        /// <value>The invoice type.</value>
        [DataMember(Name="invoiceType", EmitDefaultValue=false)]
        public string InvoiceType { get; set; }

        /// <summary>
        /// The invoice external identifier.
        /// </summary>
        /// <value>The invoice external identifier.</value>
        [DataMember(Name="externalId", EmitDefaultValue=false)]
        public string ExternalId { get; set; }

        /// <summary>
        /// The exchange system unique identifier assigned to invoice.
        /// </summary>
        /// <value>The exchange system unique identifier assigned to invoice.</value>
        [DataMember(Name="exchangeSystemUID", EmitDefaultValue=false)]
        public string ExchangeSystemUID { get; set; }

        /// <summary>
        /// The invoce notification identifier.
        /// </summary>
        /// <value>The invoce notification identifier.</value>
        [DataMember(Name="invoiceNotificationUID", EmitDefaultValue=false)]
        public string InvoiceNotificationUID { get; set; }

        /// <summary>
        /// The invoice compiler code
        /// </summary>
        /// <value>The invoice compiler code</value>
        [DataMember(Name="invoiceCompilerCode", EmitDefaultValue=false)]
        public string InvoiceCompilerCode { get; set; }

        /// <summary>
        /// Specifies if the invoce is active for the Aoo.
        /// </summary>
        /// <value>Specifies if the invoce is active for the Aoo.</value>
        [DataMember(Name="isActive", EmitDefaultValue=false)]
        public bool? IsActive { get; set; }

        /// <summary>
        /// The notification type.
        /// </summary>
        /// <value>The notification type.</value>
        [DataMember(Name="notificationType", EmitDefaultValue=false)]
        public string NotificationType { get; set; }

        /// <summary>
        /// Validation error notification
        /// </summary>
        /// <value>Validation error notification</value>
        [DataMember(Name="validationError", EmitDefaultValue=false)]
        public TransmissionValidationErrorNotification ValidationError { get; set; }

        /// <summary>
        /// PA Notifications
        /// </summary>
        /// <value>PA Notifications</value>
        [DataMember(Name="paNotifications", EmitDefaultValue=false)]
        public TransmissionPANotification PaNotifications { get; set; }

        /// <summary>
        /// B2B Notifications
        /// </summary>
        /// <value>B2B Notifications</value>
        [DataMember(Name="b2bNotifications", EmitDefaultValue=false)]
        public TransmissionB2BNotification B2bNotifications { get; set; }

        /// <summary>
        /// sent to conservation notification
        /// </summary>
        /// <value>sent to conservation notification</value>
        [DataMember(Name="conservationSent", EmitDefaultValue=false)]
        public TransmissionConservationSentNotification ConservationSent { get; set; }

        /// <summary>
        /// A message related.
        /// </summary>
        /// <value>A message related.</value>
        [DataMember(Name="message", EmitDefaultValue=false)]
        public string Message { get; set; }

        /// <summary>
        /// Invoice metadata
        /// </summary>
        /// <value>Invoice metadata</value>
        [DataMember(Name="metadata", EmitDefaultValue=false)]
        public List<TransmissionMetadata> Metadata { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TransmissionNotification {\n");
            sb.Append("  UtcDate: ").Append(UtcDate).Append("\n");
            sb.Append("  InvoiceUID: ").Append(InvoiceUID).Append("\n");
            sb.Append("  ProfileUID: ").Append(ProfileUID).Append("\n");
            sb.Append("  InvoiceType: ").Append(InvoiceType).Append("\n");
            sb.Append("  ExternalId: ").Append(ExternalId).Append("\n");
            sb.Append("  ExchangeSystemUID: ").Append(ExchangeSystemUID).Append("\n");
            sb.Append("  InvoiceNotificationUID: ").Append(InvoiceNotificationUID).Append("\n");
            sb.Append("  InvoiceCompilerCode: ").Append(InvoiceCompilerCode).Append("\n");
            sb.Append("  IsActive: ").Append(IsActive).Append("\n");
            sb.Append("  NotificationType: ").Append(NotificationType).Append("\n");
            sb.Append("  ValidationError: ").Append(ValidationError).Append("\n");
            sb.Append("  PaNotifications: ").Append(PaNotifications).Append("\n");
            sb.Append("  B2bNotifications: ").Append(B2bNotifications).Append("\n");
            sb.Append("  ConservationSent: ").Append(ConservationSent).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TransmissionNotification);
        }

        /// <summary>
        /// Returns true if TransmissionNotification instances are equal
        /// </summary>
        /// <param name="input">Instance of TransmissionNotification to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TransmissionNotification input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.UtcDate == input.UtcDate ||
                    (this.UtcDate != null &&
                    this.UtcDate.Equals(input.UtcDate))
                ) && 
                (
                    this.InvoiceUID == input.InvoiceUID ||
                    (this.InvoiceUID != null &&
                    this.InvoiceUID.Equals(input.InvoiceUID))
                ) && 
                (
                    this.ProfileUID == input.ProfileUID ||
                    (this.ProfileUID != null &&
                    this.ProfileUID.Equals(input.ProfileUID))
                ) && 
                (
                    this.InvoiceType == input.InvoiceType ||
                    (this.InvoiceType != null &&
                    this.InvoiceType.Equals(input.InvoiceType))
                ) && 
                (
                    this.ExternalId == input.ExternalId ||
                    (this.ExternalId != null &&
                    this.ExternalId.Equals(input.ExternalId))
                ) && 
                (
                    this.ExchangeSystemUID == input.ExchangeSystemUID ||
                    (this.ExchangeSystemUID != null &&
                    this.ExchangeSystemUID.Equals(input.ExchangeSystemUID))
                ) && 
                (
                    this.InvoiceNotificationUID == input.InvoiceNotificationUID ||
                    (this.InvoiceNotificationUID != null &&
                    this.InvoiceNotificationUID.Equals(input.InvoiceNotificationUID))
                ) && 
                (
                    this.InvoiceCompilerCode == input.InvoiceCompilerCode ||
                    (this.InvoiceCompilerCode != null &&
                    this.InvoiceCompilerCode.Equals(input.InvoiceCompilerCode))
                ) && 
                (
                    this.IsActive == input.IsActive ||
                    (this.IsActive != null &&
                    this.IsActive.Equals(input.IsActive))
                ) && 
                (
                    this.NotificationType == input.NotificationType ||
                    (this.NotificationType != null &&
                    this.NotificationType.Equals(input.NotificationType))
                ) && 
                (
                    this.ValidationError == input.ValidationError ||
                    (this.ValidationError != null &&
                    this.ValidationError.Equals(input.ValidationError))
                ) && 
                (
                    this.PaNotifications == input.PaNotifications ||
                    (this.PaNotifications != null &&
                    this.PaNotifications.Equals(input.PaNotifications))
                ) && 
                (
                    this.B2bNotifications == input.B2bNotifications ||
                    (this.B2bNotifications != null &&
                    this.B2bNotifications.Equals(input.B2bNotifications))
                ) && 
                (
                    this.ConservationSent == input.ConservationSent ||
                    (this.ConservationSent != null &&
                    this.ConservationSent.Equals(input.ConservationSent))
                ) && 
                (
                    this.Message == input.Message ||
                    (this.Message != null &&
                    this.Message.Equals(input.Message))
                ) && 
                (
                    this.Metadata == input.Metadata ||
                    this.Metadata != null &&
                    this.Metadata.SequenceEqual(input.Metadata)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.UtcDate != null)
                    hashCode = hashCode * 59 + this.UtcDate.GetHashCode();
                if (this.InvoiceUID != null)
                    hashCode = hashCode * 59 + this.InvoiceUID.GetHashCode();
                if (this.ProfileUID != null)
                    hashCode = hashCode * 59 + this.ProfileUID.GetHashCode();
                if (this.InvoiceType != null)
                    hashCode = hashCode * 59 + this.InvoiceType.GetHashCode();
                if (this.ExternalId != null)
                    hashCode = hashCode * 59 + this.ExternalId.GetHashCode();
                if (this.ExchangeSystemUID != null)
                    hashCode = hashCode * 59 + this.ExchangeSystemUID.GetHashCode();
                if (this.InvoiceNotificationUID != null)
                    hashCode = hashCode * 59 + this.InvoiceNotificationUID.GetHashCode();
                if (this.InvoiceCompilerCode != null)
                    hashCode = hashCode * 59 + this.InvoiceCompilerCode.GetHashCode();
                if (this.IsActive != null)
                    hashCode = hashCode * 59 + this.IsActive.GetHashCode();
                if (this.NotificationType != null)
                    hashCode = hashCode * 59 + this.NotificationType.GetHashCode();
                if (this.ValidationError != null)
                    hashCode = hashCode * 59 + this.ValidationError.GetHashCode();
                if (this.PaNotifications != null)
                    hashCode = hashCode * 59 + this.PaNotifications.GetHashCode();
                if (this.B2bNotifications != null)
                    hashCode = hashCode * 59 + this.B2bNotifications.GetHashCode();
                if (this.ConservationSent != null)
                    hashCode = hashCode * 59 + this.ConservationSent.GetHashCode();
                if (this.Message != null)
                    hashCode = hashCode * 59 + this.Message.GetHashCode();
                if (this.Metadata != null)
                    hashCode = hashCode * 59 + this.Metadata.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
