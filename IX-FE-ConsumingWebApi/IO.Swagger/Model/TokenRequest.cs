/* 
 * OAuth API V2
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// TokenRequest
    /// </summary>
    [DataContract]
    public partial class TokenRequest :  IEquatable<TokenRequest>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets Grant_Type
        /// </summary>
        /// <value>Gets or Sets Grant_Type</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum GrantTypeEnum
        {
            
            /// <summary>
            /// Enum Password for value: password
            /// </summary>
            [EnumMember(Value = "password")]
            Password = 1,
            
            /// <summary>
            /// Enum Refreshtoken for value: refresh_token
            /// </summary>
            [EnumMember(Value = "refresh_token")]
            Refreshtoken = 2
        }

        /// <summary>
        /// Gets or Sets Grant_Type
        /// </summary>
        /// <value>Gets or Sets Grant_Type</value>
        [DataMember(Name="grant_type", EmitDefaultValue=false)]
        public GrantTypeEnum GrantType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="TokenRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TokenRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TokenRequest" /> class.
        /// </summary>
        /// <param name="clientId">Gets or Sets ClientId (required).</param>
        /// <param name="clientSecret">Gets or Sets ClientSecret (required).</param>
        /// <param name="grantType">Gets or Sets Grant_Type (required).</param>
        /// <param name="username">Gets or Sets Username.</param>
        /// <param name="password">Gets or Sets Password.</param>
        /// <param name="scopes">Gets or Sets Scopes.</param>
        /// <param name="refreshToken">Gets or Sets Refresh_Token.</param>
        /// <param name="clientVersion">Gets or Sets Client_Version.</param>
        public TokenRequest(string clientId = default(string), string clientSecret = default(string), GrantTypeEnum grantType = default(GrantTypeEnum), string username = default(string), string password = default(string), List<string> scopes = default(List<string>), string refreshToken = default(string), string clientVersion = default(string))
        {
            // to ensure "clientId" is required (not null)
            if (clientId == null)
            {
                throw new InvalidDataException("clientId is a required property for TokenRequest and cannot be null");
            }
            else
            {
                this.ClientId = clientId;
            }
            // to ensure "clientSecret" is required (not null)
            if (clientSecret == null)
            {
                throw new InvalidDataException("clientSecret is a required property for TokenRequest and cannot be null");
            }
            else
            {
                this.ClientSecret = clientSecret;
            }
            // to ensure "grantType" is required (not null)
            if (grantType == null)
            {
                throw new InvalidDataException("grantType is a required property for TokenRequest and cannot be null");
            }
            else
            {
                this.GrantType = grantType;
            }
            this.Username = username;
            this.Password = password;
            this.Scopes = scopes;
            this.RefreshToken = refreshToken;
            this.ClientVersion = clientVersion;
        }
        
        /// <summary>
        /// Gets or Sets ClientId
        /// </summary>
        /// <value>Gets or Sets ClientId</value>
        [DataMember(Name="client_id", EmitDefaultValue=false)]
        public string ClientId { get; set; }

        /// <summary>
        /// Gets or Sets ClientSecret
        /// </summary>
        /// <value>Gets or Sets ClientSecret</value>
        [DataMember(Name="client_secret", EmitDefaultValue=false)]
        public string ClientSecret { get; set; }


        /// <summary>
        /// Gets or Sets Username
        /// </summary>
        /// <value>Gets or Sets Username</value>
        [DataMember(Name="username", EmitDefaultValue=false)]
        public string Username { get; set; }

        /// <summary>
        /// Gets or Sets Password
        /// </summary>
        /// <value>Gets or Sets Password</value>
        [DataMember(Name="password", EmitDefaultValue=false)]
        public string Password { get; set; }

        /// <summary>
        /// Gets or Sets Scopes
        /// </summary>
        /// <value>Gets or Sets Scopes</value>
        [DataMember(Name="scopes", EmitDefaultValue=false)]
        public List<string> Scopes { get; set; }

        /// <summary>
        /// Gets or Sets Refresh_Token
        /// </summary>
        /// <value>Gets or Sets Refresh_Token</value>
        [DataMember(Name="refresh_token", EmitDefaultValue=false)]
        public string RefreshToken { get; set; }

        /// <summary>
        /// Gets or Sets Client_Version
        /// </summary>
        /// <value>Gets or Sets Client_Version</value>
        [DataMember(Name="client_version", EmitDefaultValue=false)]
        public string ClientVersion { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TokenRequest {\n");
            sb.Append("  ClientId: ").Append(ClientId).Append("\n");
            sb.Append("  ClientSecret: ").Append(ClientSecret).Append("\n");
            sb.Append("  GrantType: ").Append(GrantType).Append("\n");
            sb.Append("  Username: ").Append(Username).Append("\n");
            sb.Append("  Password: ").Append(Password).Append("\n");
            sb.Append("  Scopes: ").Append(Scopes).Append("\n");
            sb.Append("  RefreshToken: ").Append(RefreshToken).Append("\n");
            sb.Append("  ClientVersion: ").Append(ClientVersion).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TokenRequest);
        }

        /// <summary>
        /// Returns true if TokenRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of TokenRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TokenRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ClientId == input.ClientId ||
                    (this.ClientId != null &&
                    this.ClientId.Equals(input.ClientId))
                ) && 
                (
                    this.ClientSecret == input.ClientSecret ||
                    (this.ClientSecret != null &&
                    this.ClientSecret.Equals(input.ClientSecret))
                ) && 
                (
                    this.GrantType == input.GrantType ||
                    (this.GrantType != null &&
                    this.GrantType.Equals(input.GrantType))
                ) && 
                (
                    this.Username == input.Username ||
                    (this.Username != null &&
                    this.Username.Equals(input.Username))
                ) && 
                (
                    this.Password == input.Password ||
                    (this.Password != null &&
                    this.Password.Equals(input.Password))
                ) && 
                (
                    this.Scopes == input.Scopes ||
                    this.Scopes != null &&
                    this.Scopes.SequenceEqual(input.Scopes)
                ) && 
                (
                    this.RefreshToken == input.RefreshToken ||
                    (this.RefreshToken != null &&
                    this.RefreshToken.Equals(input.RefreshToken))
                ) && 
                (
                    this.ClientVersion == input.ClientVersion ||
                    (this.ClientVersion != null &&
                    this.ClientVersion.Equals(input.ClientVersion))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ClientId != null)
                    hashCode = hashCode * 59 + this.ClientId.GetHashCode();
                if (this.ClientSecret != null)
                    hashCode = hashCode * 59 + this.ClientSecret.GetHashCode();
                if (this.GrantType != null)
                    hashCode = hashCode * 59 + this.GrantType.GetHashCode();
                if (this.Username != null)
                    hashCode = hashCode * 59 + this.Username.GetHashCode();
                if (this.Password != null)
                    hashCode = hashCode * 59 + this.Password.GetHashCode();
                if (this.Scopes != null)
                    hashCode = hashCode * 59 + this.Scopes.GetHashCode();
                if (this.RefreshToken != null)
                    hashCode = hashCode * 59 + this.RefreshToken.GetHashCode();
                if (this.ClientVersion != null)
                    hashCode = hashCode * 59 + this.ClientVersion.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
