/* 
 * IX.FE API V3.1
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v3.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Represent an outcome notification
    /// </summary>
    [DataContract]
    public partial class ReceptionOutcomePANotification :  IEquatable<ReceptionOutcomePANotification>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ReceptionOutcomePANotification" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ReceptionOutcomePANotification() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ReceptionOutcomePANotification" /> class.
        /// </summary>
        /// <param name="type">Outcome type (required).</param>
        /// <param name="motivation">Motivation.</param>
        public ReceptionOutcomePANotification(string type = default(string), string motivation = default(string))
        {
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new InvalidDataException("type is a required property for ReceptionOutcomePANotification and cannot be null");
            }
            else
            {
                this.Type = type;
            }
            this.Motivation = motivation;
        }
        
        /// <summary>
        /// Outcome type
        /// </summary>
        /// <value>Outcome type</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// Motivation
        /// </summary>
        /// <value>Motivation</value>
        [DataMember(Name="motivation", EmitDefaultValue=false)]
        public string Motivation { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ReceptionOutcomePANotification {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Motivation: ").Append(Motivation).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ReceptionOutcomePANotification);
        }

        /// <summary>
        /// Returns true if ReceptionOutcomePANotification instances are equal
        /// </summary>
        /// <param name="input">Instance of ReceptionOutcomePANotification to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ReceptionOutcomePANotification input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Motivation == input.Motivation ||
                    (this.Motivation != null &&
                    this.Motivation.Equals(input.Motivation))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Motivation != null)
                    hashCode = hashCode * 59 + this.Motivation.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
