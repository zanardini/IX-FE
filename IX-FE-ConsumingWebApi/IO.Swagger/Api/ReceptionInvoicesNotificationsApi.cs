/* 
 * IX.FE API V3.1
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v3.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IReceptionInvoicesNotificationsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Retrieve the next notifications
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aooUID">Aoo unique identifier</param>
        /// <param name="uoUID">Uo unique identifier</param>
        /// <param name="subscriptionUID">Subscription unique identifier</param>
        /// <param name="take">the number of notification to retrieve</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>ReceptionNotificationsResponse</returns>
        ReceptionNotificationsResponse GetReceptionNotifications (Guid? aooUID, string uoUID, string subscriptionUID, int? take, string xAuthorization);

        /// <summary>
        /// Retrieve the next notifications
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aooUID">Aoo unique identifier</param>
        /// <param name="uoUID">Uo unique identifier</param>
        /// <param name="subscriptionUID">Subscription unique identifier</param>
        /// <param name="take">the number of notification to retrieve</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>ApiResponse of ReceptionNotificationsResponse</returns>
        ApiResponse<ReceptionNotificationsResponse> GetReceptionNotificationsWithHttpInfo (Guid? aooUID, string uoUID, string subscriptionUID, int? take, string xAuthorization);
        /// <summary>
        /// Retrieve the next notifications
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aooUID">Aoo unique identifier</param>
        /// <param name="uoUID">Uo unique identifier</param>
        /// <param name="subscriptionUID">Subscription unique identifier</param>
        /// <param name="take">the number of notification to retrieve</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>ReceptionOffsetNotificationsResponse</returns>
        ReceptionOffsetNotificationsResponse GetReceptionOffsetNotifications (Guid? aooUID, string uoUID, string subscriptionUID, int? take, string xAuthorization);

        /// <summary>
        /// Retrieve the next notifications
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aooUID">Aoo unique identifier</param>
        /// <param name="uoUID">Uo unique identifier</param>
        /// <param name="subscriptionUID">Subscription unique identifier</param>
        /// <param name="take">the number of notification to retrieve</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>ApiResponse of ReceptionOffsetNotificationsResponse</returns>
        ApiResponse<ReceptionOffsetNotificationsResponse> GetReceptionOffsetNotificationsWithHttpInfo (Guid? aooUID, string uoUID, string subscriptionUID, int? take, string xAuthorization);
        /// <summary>
        /// Create a Subscription offset
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aooUID">Aoo unique identifier</param>
        /// <param name="uoUID">Uo unique identifier</param>
        /// <param name="subscribeRequest">Subscription request</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>ReceptionSubscribeResponse</returns>
        ReceptionSubscribeResponse ReceptionOffsetSubscribe (Guid? aooUID, string uoUID, ReceptionSubscribeOffsetRequest subscribeRequest, string xAuthorization);

        /// <summary>
        /// Create a Subscription offset
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aooUID">Aoo unique identifier</param>
        /// <param name="uoUID">Uo unique identifier</param>
        /// <param name="subscribeRequest">Subscription request</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>ApiResponse of ReceptionSubscribeResponse</returns>
        ApiResponse<ReceptionSubscribeResponse> ReceptionOffsetSubscribeWithHttpInfo (Guid? aooUID, string uoUID, ReceptionSubscribeOffsetRequest subscribeRequest, string xAuthorization);
        /// <summary>
        /// Remove a Subscription offset
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aooUID">Aoo unique identifier</param>
        /// <param name="uoUID">Uo unique identifier</param>
        /// <param name="subscriptionUID">Subscription unique identifier</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns></returns>
        void ReceptionOffsetUnsubscribe (Guid? aooUID, string uoUID, string subscriptionUID, string xAuthorization);

        /// <summary>
        /// Remove a Subscription offset
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aooUID">Aoo unique identifier</param>
        /// <param name="uoUID">Uo unique identifier</param>
        /// <param name="subscriptionUID">Subscription unique identifier</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ReceptionOffsetUnsubscribeWithHttpInfo (Guid? aooUID, string uoUID, string subscriptionUID, string xAuthorization);
        /// <summary>
        /// Create a Subscription
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aooUID">Aoo unique identifier</param>
        /// <param name="uoUID">Uo unique identifier</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>ReceptionSubscribeResponse</returns>
        ReceptionSubscribeResponse ReceptionSubscribe (Guid? aooUID, string uoUID, string xAuthorization);

        /// <summary>
        /// Create a Subscription
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aooUID">Aoo unique identifier</param>
        /// <param name="uoUID">Uo unique identifier</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>ApiResponse of ReceptionSubscribeResponse</returns>
        ApiResponse<ReceptionSubscribeResponse> ReceptionSubscribeWithHttpInfo (Guid? aooUID, string uoUID, string xAuthorization);
        /// <summary>
        /// Set the acknowledge to confirm to proceed
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aooUID">Aoo unique identifier</param>
        /// <param name="uoUID">Uo unique identifier</param>
        /// <param name="subscriptionUID">Subscription unique identifier</param>
        /// <param name="ackUID">Ack unique identifie</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns></returns>
        void ReceptionSubscriptionAck (Guid? aooUID, string uoUID, string subscriptionUID, string ackUID, string xAuthorization);

        /// <summary>
        /// Set the acknowledge to confirm to proceed
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aooUID">Aoo unique identifier</param>
        /// <param name="uoUID">Uo unique identifier</param>
        /// <param name="subscriptionUID">Subscription unique identifier</param>
        /// <param name="ackUID">Ack unique identifie</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ReceptionSubscriptionAckWithHttpInfo (Guid? aooUID, string uoUID, string subscriptionUID, string ackUID, string xAuthorization);
        /// <summary>
        /// Commit the Subscription position
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aooUID">Aoo unique identifier</param>
        /// <param name="uoUID">Uo unique identifier</param>
        /// <param name="subscriptionUID">Subscription unique identifier</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns></returns>
        void ReceptionSubscriptionCommit (Guid? aooUID, string uoUID, string subscriptionUID, string xAuthorization);

        /// <summary>
        /// Commit the Subscription position
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aooUID">Aoo unique identifier</param>
        /// <param name="uoUID">Uo unique identifier</param>
        /// <param name="subscriptionUID">Subscription unique identifier</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ReceptionSubscriptionCommitWithHttpInfo (Guid? aooUID, string uoUID, string subscriptionUID, string xAuthorization);
        /// <summary>
        /// Remove a Subscription
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aooUID">Aoo unique identifier</param>
        /// <param name="uoUID">Uo unique identifier</param>
        /// <param name="subscriptionUID">Subscription unique identifier</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns></returns>
        void ReceptionUnsubscribe (Guid? aooUID, string uoUID, string subscriptionUID, string xAuthorization);

        /// <summary>
        /// Remove a Subscription
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aooUID">Aoo unique identifier</param>
        /// <param name="uoUID">Uo unique identifier</param>
        /// <param name="subscriptionUID">Subscription unique identifier</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ReceptionUnsubscribeWithHttpInfo (Guid? aooUID, string uoUID, string subscriptionUID, string xAuthorization);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Retrieve the next notifications
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aooUID">Aoo unique identifier</param>
        /// <param name="uoUID">Uo unique identifier</param>
        /// <param name="subscriptionUID">Subscription unique identifier</param>
        /// <param name="take">the number of notification to retrieve</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of ReceptionNotificationsResponse</returns>
        System.Threading.Tasks.Task<ReceptionNotificationsResponse> GetReceptionNotificationsAsync (Guid? aooUID, string uoUID, string subscriptionUID, int? take, string xAuthorization);

        /// <summary>
        /// Retrieve the next notifications
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aooUID">Aoo unique identifier</param>
        /// <param name="uoUID">Uo unique identifier</param>
        /// <param name="subscriptionUID">Subscription unique identifier</param>
        /// <param name="take">the number of notification to retrieve</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of ApiResponse (ReceptionNotificationsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ReceptionNotificationsResponse>> GetReceptionNotificationsAsyncWithHttpInfo (Guid? aooUID, string uoUID, string subscriptionUID, int? take, string xAuthorization);
        /// <summary>
        /// Retrieve the next notifications
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aooUID">Aoo unique identifier</param>
        /// <param name="uoUID">Uo unique identifier</param>
        /// <param name="subscriptionUID">Subscription unique identifier</param>
        /// <param name="take">the number of notification to retrieve</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of ReceptionOffsetNotificationsResponse</returns>
        System.Threading.Tasks.Task<ReceptionOffsetNotificationsResponse> GetReceptionOffsetNotificationsAsync (Guid? aooUID, string uoUID, string subscriptionUID, int? take, string xAuthorization);

        /// <summary>
        /// Retrieve the next notifications
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aooUID">Aoo unique identifier</param>
        /// <param name="uoUID">Uo unique identifier</param>
        /// <param name="subscriptionUID">Subscription unique identifier</param>
        /// <param name="take">the number of notification to retrieve</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of ApiResponse (ReceptionOffsetNotificationsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ReceptionOffsetNotificationsResponse>> GetReceptionOffsetNotificationsAsyncWithHttpInfo (Guid? aooUID, string uoUID, string subscriptionUID, int? take, string xAuthorization);
        /// <summary>
        /// Create a Subscription offset
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aooUID">Aoo unique identifier</param>
        /// <param name="uoUID">Uo unique identifier</param>
        /// <param name="subscribeRequest">Subscription request</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of ReceptionSubscribeResponse</returns>
        System.Threading.Tasks.Task<ReceptionSubscribeResponse> ReceptionOffsetSubscribeAsync (Guid? aooUID, string uoUID, ReceptionSubscribeOffsetRequest subscribeRequest, string xAuthorization);

        /// <summary>
        /// Create a Subscription offset
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aooUID">Aoo unique identifier</param>
        /// <param name="uoUID">Uo unique identifier</param>
        /// <param name="subscribeRequest">Subscription request</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of ApiResponse (ReceptionSubscribeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ReceptionSubscribeResponse>> ReceptionOffsetSubscribeAsyncWithHttpInfo (Guid? aooUID, string uoUID, ReceptionSubscribeOffsetRequest subscribeRequest, string xAuthorization);
        /// <summary>
        /// Remove a Subscription offset
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aooUID">Aoo unique identifier</param>
        /// <param name="uoUID">Uo unique identifier</param>
        /// <param name="subscriptionUID">Subscription unique identifier</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ReceptionOffsetUnsubscribeAsync (Guid? aooUID, string uoUID, string subscriptionUID, string xAuthorization);

        /// <summary>
        /// Remove a Subscription offset
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aooUID">Aoo unique identifier</param>
        /// <param name="uoUID">Uo unique identifier</param>
        /// <param name="subscriptionUID">Subscription unique identifier</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ReceptionOffsetUnsubscribeAsyncWithHttpInfo (Guid? aooUID, string uoUID, string subscriptionUID, string xAuthorization);
        /// <summary>
        /// Create a Subscription
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aooUID">Aoo unique identifier</param>
        /// <param name="uoUID">Uo unique identifier</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of ReceptionSubscribeResponse</returns>
        System.Threading.Tasks.Task<ReceptionSubscribeResponse> ReceptionSubscribeAsync (Guid? aooUID, string uoUID, string xAuthorization);

        /// <summary>
        /// Create a Subscription
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aooUID">Aoo unique identifier</param>
        /// <param name="uoUID">Uo unique identifier</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of ApiResponse (ReceptionSubscribeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ReceptionSubscribeResponse>> ReceptionSubscribeAsyncWithHttpInfo (Guid? aooUID, string uoUID, string xAuthorization);
        /// <summary>
        /// Set the acknowledge to confirm to proceed
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aooUID">Aoo unique identifier</param>
        /// <param name="uoUID">Uo unique identifier</param>
        /// <param name="subscriptionUID">Subscription unique identifier</param>
        /// <param name="ackUID">Ack unique identifie</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ReceptionSubscriptionAckAsync (Guid? aooUID, string uoUID, string subscriptionUID, string ackUID, string xAuthorization);

        /// <summary>
        /// Set the acknowledge to confirm to proceed
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aooUID">Aoo unique identifier</param>
        /// <param name="uoUID">Uo unique identifier</param>
        /// <param name="subscriptionUID">Subscription unique identifier</param>
        /// <param name="ackUID">Ack unique identifie</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ReceptionSubscriptionAckAsyncWithHttpInfo (Guid? aooUID, string uoUID, string subscriptionUID, string ackUID, string xAuthorization);
        /// <summary>
        /// Commit the Subscription position
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aooUID">Aoo unique identifier</param>
        /// <param name="uoUID">Uo unique identifier</param>
        /// <param name="subscriptionUID">Subscription unique identifier</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ReceptionSubscriptionCommitAsync (Guid? aooUID, string uoUID, string subscriptionUID, string xAuthorization);

        /// <summary>
        /// Commit the Subscription position
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aooUID">Aoo unique identifier</param>
        /// <param name="uoUID">Uo unique identifier</param>
        /// <param name="subscriptionUID">Subscription unique identifier</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ReceptionSubscriptionCommitAsyncWithHttpInfo (Guid? aooUID, string uoUID, string subscriptionUID, string xAuthorization);
        /// <summary>
        /// Remove a Subscription
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aooUID">Aoo unique identifier</param>
        /// <param name="uoUID">Uo unique identifier</param>
        /// <param name="subscriptionUID">Subscription unique identifier</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ReceptionUnsubscribeAsync (Guid? aooUID, string uoUID, string subscriptionUID, string xAuthorization);

        /// <summary>
        /// Remove a Subscription
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aooUID">Aoo unique identifier</param>
        /// <param name="uoUID">Uo unique identifier</param>
        /// <param name="subscriptionUID">Subscription unique identifier</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ReceptionUnsubscribeAsyncWithHttpInfo (Guid? aooUID, string uoUID, string subscriptionUID, string xAuthorization);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ReceptionInvoicesNotificationsApi : IReceptionInvoicesNotificationsApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ReceptionInvoicesNotificationsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ReceptionInvoicesNotificationsApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ReceptionInvoicesNotificationsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ReceptionInvoicesNotificationsApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Retrieve the next notifications 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aooUID">Aoo unique identifier</param>
        /// <param name="uoUID">Uo unique identifier</param>
        /// <param name="subscriptionUID">Subscription unique identifier</param>
        /// <param name="take">the number of notification to retrieve</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>ReceptionNotificationsResponse</returns>
        public ReceptionNotificationsResponse GetReceptionNotifications (Guid? aooUID, string uoUID, string subscriptionUID, int? take, string xAuthorization)
        {
             ApiResponse<ReceptionNotificationsResponse> localVarResponse = GetReceptionNotificationsWithHttpInfo(aooUID, uoUID, subscriptionUID, take, xAuthorization);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve the next notifications 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aooUID">Aoo unique identifier</param>
        /// <param name="uoUID">Uo unique identifier</param>
        /// <param name="subscriptionUID">Subscription unique identifier</param>
        /// <param name="take">the number of notification to retrieve</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>ApiResponse of ReceptionNotificationsResponse</returns>
        public ApiResponse< ReceptionNotificationsResponse > GetReceptionNotificationsWithHttpInfo (Guid? aooUID, string uoUID, string subscriptionUID, int? take, string xAuthorization)
        {
            // verify the required parameter 'aooUID' is set
            if (aooUID == null)
                throw new ApiException(400, "Missing required parameter 'aooUID' when calling ReceptionInvoicesNotificationsApi->GetReceptionNotifications");
            // verify the required parameter 'uoUID' is set
            if (uoUID == null)
                throw new ApiException(400, "Missing required parameter 'uoUID' when calling ReceptionInvoicesNotificationsApi->GetReceptionNotifications");
            // verify the required parameter 'subscriptionUID' is set
            if (subscriptionUID == null)
                throw new ApiException(400, "Missing required parameter 'subscriptionUID' when calling ReceptionInvoicesNotificationsApi->GetReceptionNotifications");
            // verify the required parameter 'take' is set
            if (take == null)
                throw new ApiException(400, "Missing required parameter 'take' when calling ReceptionInvoicesNotificationsApi->GetReceptionNotifications");
            // verify the required parameter 'xAuthorization' is set
            if (xAuthorization == null)
                throw new ApiException(400, "Missing required parameter 'xAuthorization' when calling ReceptionInvoicesNotificationsApi->GetReceptionNotifications");

            var localVarPath = "/api/v3.1/reception/notifications/aoos/{aooUID}/uos/{uoUID}/subscriptions/{subscriptionUID}/notifications";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (aooUID != null) localVarPathParams.Add("aooUID", this.Configuration.ApiClient.ParameterToString(aooUID)); // path parameter
            if (uoUID != null) localVarPathParams.Add("uoUID", this.Configuration.ApiClient.ParameterToString(uoUID)); // path parameter
            if (subscriptionUID != null) localVarPathParams.Add("subscriptionUID", this.Configuration.ApiClient.ParameterToString(subscriptionUID)); // path parameter
            if (take != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "take", take)); // query parameter
            if (xAuthorization != null) localVarHeaderParams.Add("X-Authorization", this.Configuration.ApiClient.ParameterToString(xAuthorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetReceptionNotifications", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ReceptionNotificationsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ReceptionNotificationsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ReceptionNotificationsResponse)));
        }

        /// <summary>
        /// Retrieve the next notifications 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aooUID">Aoo unique identifier</param>
        /// <param name="uoUID">Uo unique identifier</param>
        /// <param name="subscriptionUID">Subscription unique identifier</param>
        /// <param name="take">the number of notification to retrieve</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of ReceptionNotificationsResponse</returns>
        public async System.Threading.Tasks.Task<ReceptionNotificationsResponse> GetReceptionNotificationsAsync (Guid? aooUID, string uoUID, string subscriptionUID, int? take, string xAuthorization)
        {
             ApiResponse<ReceptionNotificationsResponse> localVarResponse = await GetReceptionNotificationsAsyncWithHttpInfo(aooUID, uoUID, subscriptionUID, take, xAuthorization);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve the next notifications 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aooUID">Aoo unique identifier</param>
        /// <param name="uoUID">Uo unique identifier</param>
        /// <param name="subscriptionUID">Subscription unique identifier</param>
        /// <param name="take">the number of notification to retrieve</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of ApiResponse (ReceptionNotificationsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ReceptionNotificationsResponse>> GetReceptionNotificationsAsyncWithHttpInfo (Guid? aooUID, string uoUID, string subscriptionUID, int? take, string xAuthorization)
        {
            // verify the required parameter 'aooUID' is set
            if (aooUID == null)
                throw new ApiException(400, "Missing required parameter 'aooUID' when calling ReceptionInvoicesNotificationsApi->GetReceptionNotifications");
            // verify the required parameter 'uoUID' is set
            if (uoUID == null)
                throw new ApiException(400, "Missing required parameter 'uoUID' when calling ReceptionInvoicesNotificationsApi->GetReceptionNotifications");
            // verify the required parameter 'subscriptionUID' is set
            if (subscriptionUID == null)
                throw new ApiException(400, "Missing required parameter 'subscriptionUID' when calling ReceptionInvoicesNotificationsApi->GetReceptionNotifications");
            // verify the required parameter 'take' is set
            if (take == null)
                throw new ApiException(400, "Missing required parameter 'take' when calling ReceptionInvoicesNotificationsApi->GetReceptionNotifications");
            // verify the required parameter 'xAuthorization' is set
            if (xAuthorization == null)
                throw new ApiException(400, "Missing required parameter 'xAuthorization' when calling ReceptionInvoicesNotificationsApi->GetReceptionNotifications");

            var localVarPath = "/api/v3.1/reception/notifications/aoos/{aooUID}/uos/{uoUID}/subscriptions/{subscriptionUID}/notifications";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (aooUID != null) localVarPathParams.Add("aooUID", this.Configuration.ApiClient.ParameterToString(aooUID)); // path parameter
            if (uoUID != null) localVarPathParams.Add("uoUID", this.Configuration.ApiClient.ParameterToString(uoUID)); // path parameter
            if (subscriptionUID != null) localVarPathParams.Add("subscriptionUID", this.Configuration.ApiClient.ParameterToString(subscriptionUID)); // path parameter
            if (take != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "take", take)); // query parameter
            if (xAuthorization != null) localVarHeaderParams.Add("X-Authorization", this.Configuration.ApiClient.ParameterToString(xAuthorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetReceptionNotifications", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ReceptionNotificationsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ReceptionNotificationsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ReceptionNotificationsResponse)));
        }

        /// <summary>
        /// Retrieve the next notifications 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aooUID">Aoo unique identifier</param>
        /// <param name="uoUID">Uo unique identifier</param>
        /// <param name="subscriptionUID">Subscription unique identifier</param>
        /// <param name="take">the number of notification to retrieve</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>ReceptionOffsetNotificationsResponse</returns>
        public ReceptionOffsetNotificationsResponse GetReceptionOffsetNotifications (Guid? aooUID, string uoUID, string subscriptionUID, int? take, string xAuthorization)
        {
             ApiResponse<ReceptionOffsetNotificationsResponse> localVarResponse = GetReceptionOffsetNotificationsWithHttpInfo(aooUID, uoUID, subscriptionUID, take, xAuthorization);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve the next notifications 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aooUID">Aoo unique identifier</param>
        /// <param name="uoUID">Uo unique identifier</param>
        /// <param name="subscriptionUID">Subscription unique identifier</param>
        /// <param name="take">the number of notification to retrieve</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>ApiResponse of ReceptionOffsetNotificationsResponse</returns>
        public ApiResponse< ReceptionOffsetNotificationsResponse > GetReceptionOffsetNotificationsWithHttpInfo (Guid? aooUID, string uoUID, string subscriptionUID, int? take, string xAuthorization)
        {
            // verify the required parameter 'aooUID' is set
            if (aooUID == null)
                throw new ApiException(400, "Missing required parameter 'aooUID' when calling ReceptionInvoicesNotificationsApi->GetReceptionOffsetNotifications");
            // verify the required parameter 'uoUID' is set
            if (uoUID == null)
                throw new ApiException(400, "Missing required parameter 'uoUID' when calling ReceptionInvoicesNotificationsApi->GetReceptionOffsetNotifications");
            // verify the required parameter 'subscriptionUID' is set
            if (subscriptionUID == null)
                throw new ApiException(400, "Missing required parameter 'subscriptionUID' when calling ReceptionInvoicesNotificationsApi->GetReceptionOffsetNotifications");
            // verify the required parameter 'take' is set
            if (take == null)
                throw new ApiException(400, "Missing required parameter 'take' when calling ReceptionInvoicesNotificationsApi->GetReceptionOffsetNotifications");
            // verify the required parameter 'xAuthorization' is set
            if (xAuthorization == null)
                throw new ApiException(400, "Missing required parameter 'xAuthorization' when calling ReceptionInvoicesNotificationsApi->GetReceptionOffsetNotifications");

            var localVarPath = "/api/v3.1/reception/notifications/aoos/{aooUID}/uos/{uoUID}/subscriptions-offset/{subscriptionUID}/notifications";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (aooUID != null) localVarPathParams.Add("aooUID", this.Configuration.ApiClient.ParameterToString(aooUID)); // path parameter
            if (uoUID != null) localVarPathParams.Add("uoUID", this.Configuration.ApiClient.ParameterToString(uoUID)); // path parameter
            if (subscriptionUID != null) localVarPathParams.Add("subscriptionUID", this.Configuration.ApiClient.ParameterToString(subscriptionUID)); // path parameter
            if (take != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "take", take)); // query parameter
            if (xAuthorization != null) localVarHeaderParams.Add("X-Authorization", this.Configuration.ApiClient.ParameterToString(xAuthorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetReceptionOffsetNotifications", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ReceptionOffsetNotificationsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ReceptionOffsetNotificationsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ReceptionOffsetNotificationsResponse)));
        }

        /// <summary>
        /// Retrieve the next notifications 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aooUID">Aoo unique identifier</param>
        /// <param name="uoUID">Uo unique identifier</param>
        /// <param name="subscriptionUID">Subscription unique identifier</param>
        /// <param name="take">the number of notification to retrieve</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of ReceptionOffsetNotificationsResponse</returns>
        public async System.Threading.Tasks.Task<ReceptionOffsetNotificationsResponse> GetReceptionOffsetNotificationsAsync (Guid? aooUID, string uoUID, string subscriptionUID, int? take, string xAuthorization)
        {
             ApiResponse<ReceptionOffsetNotificationsResponse> localVarResponse = await GetReceptionOffsetNotificationsAsyncWithHttpInfo(aooUID, uoUID, subscriptionUID, take, xAuthorization);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve the next notifications 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aooUID">Aoo unique identifier</param>
        /// <param name="uoUID">Uo unique identifier</param>
        /// <param name="subscriptionUID">Subscription unique identifier</param>
        /// <param name="take">the number of notification to retrieve</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of ApiResponse (ReceptionOffsetNotificationsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ReceptionOffsetNotificationsResponse>> GetReceptionOffsetNotificationsAsyncWithHttpInfo (Guid? aooUID, string uoUID, string subscriptionUID, int? take, string xAuthorization)
        {
            // verify the required parameter 'aooUID' is set
            if (aooUID == null)
                throw new ApiException(400, "Missing required parameter 'aooUID' when calling ReceptionInvoicesNotificationsApi->GetReceptionOffsetNotifications");
            // verify the required parameter 'uoUID' is set
            if (uoUID == null)
                throw new ApiException(400, "Missing required parameter 'uoUID' when calling ReceptionInvoicesNotificationsApi->GetReceptionOffsetNotifications");
            // verify the required parameter 'subscriptionUID' is set
            if (subscriptionUID == null)
                throw new ApiException(400, "Missing required parameter 'subscriptionUID' when calling ReceptionInvoicesNotificationsApi->GetReceptionOffsetNotifications");
            // verify the required parameter 'take' is set
            if (take == null)
                throw new ApiException(400, "Missing required parameter 'take' when calling ReceptionInvoicesNotificationsApi->GetReceptionOffsetNotifications");
            // verify the required parameter 'xAuthorization' is set
            if (xAuthorization == null)
                throw new ApiException(400, "Missing required parameter 'xAuthorization' when calling ReceptionInvoicesNotificationsApi->GetReceptionOffsetNotifications");

            var localVarPath = "/api/v3.1/reception/notifications/aoos/{aooUID}/uos/{uoUID}/subscriptions-offset/{subscriptionUID}/notifications";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (aooUID != null) localVarPathParams.Add("aooUID", this.Configuration.ApiClient.ParameterToString(aooUID)); // path parameter
            if (uoUID != null) localVarPathParams.Add("uoUID", this.Configuration.ApiClient.ParameterToString(uoUID)); // path parameter
            if (subscriptionUID != null) localVarPathParams.Add("subscriptionUID", this.Configuration.ApiClient.ParameterToString(subscriptionUID)); // path parameter
            if (take != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "take", take)); // query parameter
            if (xAuthorization != null) localVarHeaderParams.Add("X-Authorization", this.Configuration.ApiClient.ParameterToString(xAuthorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetReceptionOffsetNotifications", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ReceptionOffsetNotificationsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ReceptionOffsetNotificationsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ReceptionOffsetNotificationsResponse)));
        }

        /// <summary>
        /// Create a Subscription offset 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aooUID">Aoo unique identifier</param>
        /// <param name="uoUID">Uo unique identifier</param>
        /// <param name="subscribeRequest">Subscription request</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>ReceptionSubscribeResponse</returns>
        public ReceptionSubscribeResponse ReceptionOffsetSubscribe (Guid? aooUID, string uoUID, ReceptionSubscribeOffsetRequest subscribeRequest, string xAuthorization)
        {
             ApiResponse<ReceptionSubscribeResponse> localVarResponse = ReceptionOffsetSubscribeWithHttpInfo(aooUID, uoUID, subscribeRequest, xAuthorization);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a Subscription offset 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aooUID">Aoo unique identifier</param>
        /// <param name="uoUID">Uo unique identifier</param>
        /// <param name="subscribeRequest">Subscription request</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>ApiResponse of ReceptionSubscribeResponse</returns>
        public ApiResponse< ReceptionSubscribeResponse > ReceptionOffsetSubscribeWithHttpInfo (Guid? aooUID, string uoUID, ReceptionSubscribeOffsetRequest subscribeRequest, string xAuthorization)
        {
            // verify the required parameter 'aooUID' is set
            if (aooUID == null)
                throw new ApiException(400, "Missing required parameter 'aooUID' when calling ReceptionInvoicesNotificationsApi->ReceptionOffsetSubscribe");
            // verify the required parameter 'uoUID' is set
            if (uoUID == null)
                throw new ApiException(400, "Missing required parameter 'uoUID' when calling ReceptionInvoicesNotificationsApi->ReceptionOffsetSubscribe");
            // verify the required parameter 'subscribeRequest' is set
            if (subscribeRequest == null)
                throw new ApiException(400, "Missing required parameter 'subscribeRequest' when calling ReceptionInvoicesNotificationsApi->ReceptionOffsetSubscribe");
            // verify the required parameter 'xAuthorization' is set
            if (xAuthorization == null)
                throw new ApiException(400, "Missing required parameter 'xAuthorization' when calling ReceptionInvoicesNotificationsApi->ReceptionOffsetSubscribe");

            var localVarPath = "/api/v3.1/reception/notifications/aoos/{aooUID}/uos/{uoUID}/subscriptions-offset";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (aooUID != null) localVarPathParams.Add("aooUID", this.Configuration.ApiClient.ParameterToString(aooUID)); // path parameter
            if (uoUID != null) localVarPathParams.Add("uoUID", this.Configuration.ApiClient.ParameterToString(uoUID)); // path parameter
            if (xAuthorization != null) localVarHeaderParams.Add("X-Authorization", this.Configuration.ApiClient.ParameterToString(xAuthorization)); // header parameter
            if (subscribeRequest != null && subscribeRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(subscribeRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = subscribeRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReceptionOffsetSubscribe", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ReceptionSubscribeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ReceptionSubscribeResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ReceptionSubscribeResponse)));
        }

        /// <summary>
        /// Create a Subscription offset 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aooUID">Aoo unique identifier</param>
        /// <param name="uoUID">Uo unique identifier</param>
        /// <param name="subscribeRequest">Subscription request</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of ReceptionSubscribeResponse</returns>
        public async System.Threading.Tasks.Task<ReceptionSubscribeResponse> ReceptionOffsetSubscribeAsync (Guid? aooUID, string uoUID, ReceptionSubscribeOffsetRequest subscribeRequest, string xAuthorization)
        {
             ApiResponse<ReceptionSubscribeResponse> localVarResponse = await ReceptionOffsetSubscribeAsyncWithHttpInfo(aooUID, uoUID, subscribeRequest, xAuthorization);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a Subscription offset 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aooUID">Aoo unique identifier</param>
        /// <param name="uoUID">Uo unique identifier</param>
        /// <param name="subscribeRequest">Subscription request</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of ApiResponse (ReceptionSubscribeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ReceptionSubscribeResponse>> ReceptionOffsetSubscribeAsyncWithHttpInfo (Guid? aooUID, string uoUID, ReceptionSubscribeOffsetRequest subscribeRequest, string xAuthorization)
        {
            // verify the required parameter 'aooUID' is set
            if (aooUID == null)
                throw new ApiException(400, "Missing required parameter 'aooUID' when calling ReceptionInvoicesNotificationsApi->ReceptionOffsetSubscribe");
            // verify the required parameter 'uoUID' is set
            if (uoUID == null)
                throw new ApiException(400, "Missing required parameter 'uoUID' when calling ReceptionInvoicesNotificationsApi->ReceptionOffsetSubscribe");
            // verify the required parameter 'subscribeRequest' is set
            if (subscribeRequest == null)
                throw new ApiException(400, "Missing required parameter 'subscribeRequest' when calling ReceptionInvoicesNotificationsApi->ReceptionOffsetSubscribe");
            // verify the required parameter 'xAuthorization' is set
            if (xAuthorization == null)
                throw new ApiException(400, "Missing required parameter 'xAuthorization' when calling ReceptionInvoicesNotificationsApi->ReceptionOffsetSubscribe");

            var localVarPath = "/api/v3.1/reception/notifications/aoos/{aooUID}/uos/{uoUID}/subscriptions-offset";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (aooUID != null) localVarPathParams.Add("aooUID", this.Configuration.ApiClient.ParameterToString(aooUID)); // path parameter
            if (uoUID != null) localVarPathParams.Add("uoUID", this.Configuration.ApiClient.ParameterToString(uoUID)); // path parameter
            if (xAuthorization != null) localVarHeaderParams.Add("X-Authorization", this.Configuration.ApiClient.ParameterToString(xAuthorization)); // header parameter
            if (subscribeRequest != null && subscribeRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(subscribeRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = subscribeRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReceptionOffsetSubscribe", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ReceptionSubscribeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ReceptionSubscribeResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ReceptionSubscribeResponse)));
        }

        /// <summary>
        /// Remove a Subscription offset 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aooUID">Aoo unique identifier</param>
        /// <param name="uoUID">Uo unique identifier</param>
        /// <param name="subscriptionUID">Subscription unique identifier</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns></returns>
        public void ReceptionOffsetUnsubscribe (Guid? aooUID, string uoUID, string subscriptionUID, string xAuthorization)
        {
             ReceptionOffsetUnsubscribeWithHttpInfo(aooUID, uoUID, subscriptionUID, xAuthorization);
        }

        /// <summary>
        /// Remove a Subscription offset 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aooUID">Aoo unique identifier</param>
        /// <param name="uoUID">Uo unique identifier</param>
        /// <param name="subscriptionUID">Subscription unique identifier</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ReceptionOffsetUnsubscribeWithHttpInfo (Guid? aooUID, string uoUID, string subscriptionUID, string xAuthorization)
        {
            // verify the required parameter 'aooUID' is set
            if (aooUID == null)
                throw new ApiException(400, "Missing required parameter 'aooUID' when calling ReceptionInvoicesNotificationsApi->ReceptionOffsetUnsubscribe");
            // verify the required parameter 'uoUID' is set
            if (uoUID == null)
                throw new ApiException(400, "Missing required parameter 'uoUID' when calling ReceptionInvoicesNotificationsApi->ReceptionOffsetUnsubscribe");
            // verify the required parameter 'subscriptionUID' is set
            if (subscriptionUID == null)
                throw new ApiException(400, "Missing required parameter 'subscriptionUID' when calling ReceptionInvoicesNotificationsApi->ReceptionOffsetUnsubscribe");
            // verify the required parameter 'xAuthorization' is set
            if (xAuthorization == null)
                throw new ApiException(400, "Missing required parameter 'xAuthorization' when calling ReceptionInvoicesNotificationsApi->ReceptionOffsetUnsubscribe");

            var localVarPath = "/api/v3.1/reception/notifications/aoos/{aooUID}/uos/{uoUID}/subscriptions-offset/{subscriptionUID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (aooUID != null) localVarPathParams.Add("aooUID", this.Configuration.ApiClient.ParameterToString(aooUID)); // path parameter
            if (uoUID != null) localVarPathParams.Add("uoUID", this.Configuration.ApiClient.ParameterToString(uoUID)); // path parameter
            if (subscriptionUID != null) localVarPathParams.Add("subscriptionUID", this.Configuration.ApiClient.ParameterToString(subscriptionUID)); // path parameter
            if (xAuthorization != null) localVarHeaderParams.Add("X-Authorization", this.Configuration.ApiClient.ParameterToString(xAuthorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReceptionOffsetUnsubscribe", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Remove a Subscription offset 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aooUID">Aoo unique identifier</param>
        /// <param name="uoUID">Uo unique identifier</param>
        /// <param name="subscriptionUID">Subscription unique identifier</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ReceptionOffsetUnsubscribeAsync (Guid? aooUID, string uoUID, string subscriptionUID, string xAuthorization)
        {
             await ReceptionOffsetUnsubscribeAsyncWithHttpInfo(aooUID, uoUID, subscriptionUID, xAuthorization);

        }

        /// <summary>
        /// Remove a Subscription offset 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aooUID">Aoo unique identifier</param>
        /// <param name="uoUID">Uo unique identifier</param>
        /// <param name="subscriptionUID">Subscription unique identifier</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ReceptionOffsetUnsubscribeAsyncWithHttpInfo (Guid? aooUID, string uoUID, string subscriptionUID, string xAuthorization)
        {
            // verify the required parameter 'aooUID' is set
            if (aooUID == null)
                throw new ApiException(400, "Missing required parameter 'aooUID' when calling ReceptionInvoicesNotificationsApi->ReceptionOffsetUnsubscribe");
            // verify the required parameter 'uoUID' is set
            if (uoUID == null)
                throw new ApiException(400, "Missing required parameter 'uoUID' when calling ReceptionInvoicesNotificationsApi->ReceptionOffsetUnsubscribe");
            // verify the required parameter 'subscriptionUID' is set
            if (subscriptionUID == null)
                throw new ApiException(400, "Missing required parameter 'subscriptionUID' when calling ReceptionInvoicesNotificationsApi->ReceptionOffsetUnsubscribe");
            // verify the required parameter 'xAuthorization' is set
            if (xAuthorization == null)
                throw new ApiException(400, "Missing required parameter 'xAuthorization' when calling ReceptionInvoicesNotificationsApi->ReceptionOffsetUnsubscribe");

            var localVarPath = "/api/v3.1/reception/notifications/aoos/{aooUID}/uos/{uoUID}/subscriptions-offset/{subscriptionUID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (aooUID != null) localVarPathParams.Add("aooUID", this.Configuration.ApiClient.ParameterToString(aooUID)); // path parameter
            if (uoUID != null) localVarPathParams.Add("uoUID", this.Configuration.ApiClient.ParameterToString(uoUID)); // path parameter
            if (subscriptionUID != null) localVarPathParams.Add("subscriptionUID", this.Configuration.ApiClient.ParameterToString(subscriptionUID)); // path parameter
            if (xAuthorization != null) localVarHeaderParams.Add("X-Authorization", this.Configuration.ApiClient.ParameterToString(xAuthorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReceptionOffsetUnsubscribe", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Create a Subscription 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aooUID">Aoo unique identifier</param>
        /// <param name="uoUID">Uo unique identifier</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>ReceptionSubscribeResponse</returns>
        public ReceptionSubscribeResponse ReceptionSubscribe (Guid? aooUID, string uoUID, string xAuthorization)
        {
             ApiResponse<ReceptionSubscribeResponse> localVarResponse = ReceptionSubscribeWithHttpInfo(aooUID, uoUID, xAuthorization);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a Subscription 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aooUID">Aoo unique identifier</param>
        /// <param name="uoUID">Uo unique identifier</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>ApiResponse of ReceptionSubscribeResponse</returns>
        public ApiResponse< ReceptionSubscribeResponse > ReceptionSubscribeWithHttpInfo (Guid? aooUID, string uoUID, string xAuthorization)
        {
            // verify the required parameter 'aooUID' is set
            if (aooUID == null)
                throw new ApiException(400, "Missing required parameter 'aooUID' when calling ReceptionInvoicesNotificationsApi->ReceptionSubscribe");
            // verify the required parameter 'uoUID' is set
            if (uoUID == null)
                throw new ApiException(400, "Missing required parameter 'uoUID' when calling ReceptionInvoicesNotificationsApi->ReceptionSubscribe");
            // verify the required parameter 'xAuthorization' is set
            if (xAuthorization == null)
                throw new ApiException(400, "Missing required parameter 'xAuthorization' when calling ReceptionInvoicesNotificationsApi->ReceptionSubscribe");

            var localVarPath = "/api/v3.1/reception/notifications/aoos/{aooUID}/uos/{uoUID}/subscriptions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (aooUID != null) localVarPathParams.Add("aooUID", this.Configuration.ApiClient.ParameterToString(aooUID)); // path parameter
            if (uoUID != null) localVarPathParams.Add("uoUID", this.Configuration.ApiClient.ParameterToString(uoUID)); // path parameter
            if (xAuthorization != null) localVarHeaderParams.Add("X-Authorization", this.Configuration.ApiClient.ParameterToString(xAuthorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReceptionSubscribe", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ReceptionSubscribeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ReceptionSubscribeResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ReceptionSubscribeResponse)));
        }

        /// <summary>
        /// Create a Subscription 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aooUID">Aoo unique identifier</param>
        /// <param name="uoUID">Uo unique identifier</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of ReceptionSubscribeResponse</returns>
        public async System.Threading.Tasks.Task<ReceptionSubscribeResponse> ReceptionSubscribeAsync (Guid? aooUID, string uoUID, string xAuthorization)
        {
             ApiResponse<ReceptionSubscribeResponse> localVarResponse = await ReceptionSubscribeAsyncWithHttpInfo(aooUID, uoUID, xAuthorization);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a Subscription 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aooUID">Aoo unique identifier</param>
        /// <param name="uoUID">Uo unique identifier</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of ApiResponse (ReceptionSubscribeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ReceptionSubscribeResponse>> ReceptionSubscribeAsyncWithHttpInfo (Guid? aooUID, string uoUID, string xAuthorization)
        {
            // verify the required parameter 'aooUID' is set
            if (aooUID == null)
                throw new ApiException(400, "Missing required parameter 'aooUID' when calling ReceptionInvoicesNotificationsApi->ReceptionSubscribe");
            // verify the required parameter 'uoUID' is set
            if (uoUID == null)
                throw new ApiException(400, "Missing required parameter 'uoUID' when calling ReceptionInvoicesNotificationsApi->ReceptionSubscribe");
            // verify the required parameter 'xAuthorization' is set
            if (xAuthorization == null)
                throw new ApiException(400, "Missing required parameter 'xAuthorization' when calling ReceptionInvoicesNotificationsApi->ReceptionSubscribe");

            var localVarPath = "/api/v3.1/reception/notifications/aoos/{aooUID}/uos/{uoUID}/subscriptions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (aooUID != null) localVarPathParams.Add("aooUID", this.Configuration.ApiClient.ParameterToString(aooUID)); // path parameter
            if (uoUID != null) localVarPathParams.Add("uoUID", this.Configuration.ApiClient.ParameterToString(uoUID)); // path parameter
            if (xAuthorization != null) localVarHeaderParams.Add("X-Authorization", this.Configuration.ApiClient.ParameterToString(xAuthorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReceptionSubscribe", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ReceptionSubscribeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ReceptionSubscribeResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ReceptionSubscribeResponse)));
        }

        /// <summary>
        /// Set the acknowledge to confirm to proceed 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aooUID">Aoo unique identifier</param>
        /// <param name="uoUID">Uo unique identifier</param>
        /// <param name="subscriptionUID">Subscription unique identifier</param>
        /// <param name="ackUID">Ack unique identifie</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns></returns>
        public void ReceptionSubscriptionAck (Guid? aooUID, string uoUID, string subscriptionUID, string ackUID, string xAuthorization)
        {
             ReceptionSubscriptionAckWithHttpInfo(aooUID, uoUID, subscriptionUID, ackUID, xAuthorization);
        }

        /// <summary>
        /// Set the acknowledge to confirm to proceed 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aooUID">Aoo unique identifier</param>
        /// <param name="uoUID">Uo unique identifier</param>
        /// <param name="subscriptionUID">Subscription unique identifier</param>
        /// <param name="ackUID">Ack unique identifie</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ReceptionSubscriptionAckWithHttpInfo (Guid? aooUID, string uoUID, string subscriptionUID, string ackUID, string xAuthorization)
        {
            // verify the required parameter 'aooUID' is set
            if (aooUID == null)
                throw new ApiException(400, "Missing required parameter 'aooUID' when calling ReceptionInvoicesNotificationsApi->ReceptionSubscriptionAck");
            // verify the required parameter 'uoUID' is set
            if (uoUID == null)
                throw new ApiException(400, "Missing required parameter 'uoUID' when calling ReceptionInvoicesNotificationsApi->ReceptionSubscriptionAck");
            // verify the required parameter 'subscriptionUID' is set
            if (subscriptionUID == null)
                throw new ApiException(400, "Missing required parameter 'subscriptionUID' when calling ReceptionInvoicesNotificationsApi->ReceptionSubscriptionAck");
            // verify the required parameter 'ackUID' is set
            if (ackUID == null)
                throw new ApiException(400, "Missing required parameter 'ackUID' when calling ReceptionInvoicesNotificationsApi->ReceptionSubscriptionAck");
            // verify the required parameter 'xAuthorization' is set
            if (xAuthorization == null)
                throw new ApiException(400, "Missing required parameter 'xAuthorization' when calling ReceptionInvoicesNotificationsApi->ReceptionSubscriptionAck");

            var localVarPath = "/api/v3.1/reception/notifications/aoos/{aooUID}/uos/{uoUID}/subscriptions/{subscriptionUID}/acks/{ackUID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (aooUID != null) localVarPathParams.Add("aooUID", this.Configuration.ApiClient.ParameterToString(aooUID)); // path parameter
            if (uoUID != null) localVarPathParams.Add("uoUID", this.Configuration.ApiClient.ParameterToString(uoUID)); // path parameter
            if (subscriptionUID != null) localVarPathParams.Add("subscriptionUID", this.Configuration.ApiClient.ParameterToString(subscriptionUID)); // path parameter
            if (ackUID != null) localVarPathParams.Add("ackUID", this.Configuration.ApiClient.ParameterToString(ackUID)); // path parameter
            if (xAuthorization != null) localVarHeaderParams.Add("X-Authorization", this.Configuration.ApiClient.ParameterToString(xAuthorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReceptionSubscriptionAck", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Set the acknowledge to confirm to proceed 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aooUID">Aoo unique identifier</param>
        /// <param name="uoUID">Uo unique identifier</param>
        /// <param name="subscriptionUID">Subscription unique identifier</param>
        /// <param name="ackUID">Ack unique identifie</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ReceptionSubscriptionAckAsync (Guid? aooUID, string uoUID, string subscriptionUID, string ackUID, string xAuthorization)
        {
             await ReceptionSubscriptionAckAsyncWithHttpInfo(aooUID, uoUID, subscriptionUID, ackUID, xAuthorization);

        }

        /// <summary>
        /// Set the acknowledge to confirm to proceed 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aooUID">Aoo unique identifier</param>
        /// <param name="uoUID">Uo unique identifier</param>
        /// <param name="subscriptionUID">Subscription unique identifier</param>
        /// <param name="ackUID">Ack unique identifie</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ReceptionSubscriptionAckAsyncWithHttpInfo (Guid? aooUID, string uoUID, string subscriptionUID, string ackUID, string xAuthorization)
        {
            // verify the required parameter 'aooUID' is set
            if (aooUID == null)
                throw new ApiException(400, "Missing required parameter 'aooUID' when calling ReceptionInvoicesNotificationsApi->ReceptionSubscriptionAck");
            // verify the required parameter 'uoUID' is set
            if (uoUID == null)
                throw new ApiException(400, "Missing required parameter 'uoUID' when calling ReceptionInvoicesNotificationsApi->ReceptionSubscriptionAck");
            // verify the required parameter 'subscriptionUID' is set
            if (subscriptionUID == null)
                throw new ApiException(400, "Missing required parameter 'subscriptionUID' when calling ReceptionInvoicesNotificationsApi->ReceptionSubscriptionAck");
            // verify the required parameter 'ackUID' is set
            if (ackUID == null)
                throw new ApiException(400, "Missing required parameter 'ackUID' when calling ReceptionInvoicesNotificationsApi->ReceptionSubscriptionAck");
            // verify the required parameter 'xAuthorization' is set
            if (xAuthorization == null)
                throw new ApiException(400, "Missing required parameter 'xAuthorization' when calling ReceptionInvoicesNotificationsApi->ReceptionSubscriptionAck");

            var localVarPath = "/api/v3.1/reception/notifications/aoos/{aooUID}/uos/{uoUID}/subscriptions/{subscriptionUID}/acks/{ackUID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (aooUID != null) localVarPathParams.Add("aooUID", this.Configuration.ApiClient.ParameterToString(aooUID)); // path parameter
            if (uoUID != null) localVarPathParams.Add("uoUID", this.Configuration.ApiClient.ParameterToString(uoUID)); // path parameter
            if (subscriptionUID != null) localVarPathParams.Add("subscriptionUID", this.Configuration.ApiClient.ParameterToString(subscriptionUID)); // path parameter
            if (ackUID != null) localVarPathParams.Add("ackUID", this.Configuration.ApiClient.ParameterToString(ackUID)); // path parameter
            if (xAuthorization != null) localVarHeaderParams.Add("X-Authorization", this.Configuration.ApiClient.ParameterToString(xAuthorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReceptionSubscriptionAck", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Commit the Subscription position 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aooUID">Aoo unique identifier</param>
        /// <param name="uoUID">Uo unique identifier</param>
        /// <param name="subscriptionUID">Subscription unique identifier</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns></returns>
        public void ReceptionSubscriptionCommit (Guid? aooUID, string uoUID, string subscriptionUID, string xAuthorization)
        {
             ReceptionSubscriptionCommitWithHttpInfo(aooUID, uoUID, subscriptionUID, xAuthorization);
        }

        /// <summary>
        /// Commit the Subscription position 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aooUID">Aoo unique identifier</param>
        /// <param name="uoUID">Uo unique identifier</param>
        /// <param name="subscriptionUID">Subscription unique identifier</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ReceptionSubscriptionCommitWithHttpInfo (Guid? aooUID, string uoUID, string subscriptionUID, string xAuthorization)
        {
            // verify the required parameter 'aooUID' is set
            if (aooUID == null)
                throw new ApiException(400, "Missing required parameter 'aooUID' when calling ReceptionInvoicesNotificationsApi->ReceptionSubscriptionCommit");
            // verify the required parameter 'uoUID' is set
            if (uoUID == null)
                throw new ApiException(400, "Missing required parameter 'uoUID' when calling ReceptionInvoicesNotificationsApi->ReceptionSubscriptionCommit");
            // verify the required parameter 'subscriptionUID' is set
            if (subscriptionUID == null)
                throw new ApiException(400, "Missing required parameter 'subscriptionUID' when calling ReceptionInvoicesNotificationsApi->ReceptionSubscriptionCommit");
            // verify the required parameter 'xAuthorization' is set
            if (xAuthorization == null)
                throw new ApiException(400, "Missing required parameter 'xAuthorization' when calling ReceptionInvoicesNotificationsApi->ReceptionSubscriptionCommit");

            var localVarPath = "/api/v3.1/reception/notifications/aoos/{aooUID}/uos/{uoUID}/subscriptions/{subscriptionUID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (aooUID != null) localVarPathParams.Add("aooUID", this.Configuration.ApiClient.ParameterToString(aooUID)); // path parameter
            if (uoUID != null) localVarPathParams.Add("uoUID", this.Configuration.ApiClient.ParameterToString(uoUID)); // path parameter
            if (subscriptionUID != null) localVarPathParams.Add("subscriptionUID", this.Configuration.ApiClient.ParameterToString(subscriptionUID)); // path parameter
            if (xAuthorization != null) localVarHeaderParams.Add("X-Authorization", this.Configuration.ApiClient.ParameterToString(xAuthorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReceptionSubscriptionCommit", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Commit the Subscription position 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aooUID">Aoo unique identifier</param>
        /// <param name="uoUID">Uo unique identifier</param>
        /// <param name="subscriptionUID">Subscription unique identifier</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ReceptionSubscriptionCommitAsync (Guid? aooUID, string uoUID, string subscriptionUID, string xAuthorization)
        {
             await ReceptionSubscriptionCommitAsyncWithHttpInfo(aooUID, uoUID, subscriptionUID, xAuthorization);

        }

        /// <summary>
        /// Commit the Subscription position 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aooUID">Aoo unique identifier</param>
        /// <param name="uoUID">Uo unique identifier</param>
        /// <param name="subscriptionUID">Subscription unique identifier</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ReceptionSubscriptionCommitAsyncWithHttpInfo (Guid? aooUID, string uoUID, string subscriptionUID, string xAuthorization)
        {
            // verify the required parameter 'aooUID' is set
            if (aooUID == null)
                throw new ApiException(400, "Missing required parameter 'aooUID' when calling ReceptionInvoicesNotificationsApi->ReceptionSubscriptionCommit");
            // verify the required parameter 'uoUID' is set
            if (uoUID == null)
                throw new ApiException(400, "Missing required parameter 'uoUID' when calling ReceptionInvoicesNotificationsApi->ReceptionSubscriptionCommit");
            // verify the required parameter 'subscriptionUID' is set
            if (subscriptionUID == null)
                throw new ApiException(400, "Missing required parameter 'subscriptionUID' when calling ReceptionInvoicesNotificationsApi->ReceptionSubscriptionCommit");
            // verify the required parameter 'xAuthorization' is set
            if (xAuthorization == null)
                throw new ApiException(400, "Missing required parameter 'xAuthorization' when calling ReceptionInvoicesNotificationsApi->ReceptionSubscriptionCommit");

            var localVarPath = "/api/v3.1/reception/notifications/aoos/{aooUID}/uos/{uoUID}/subscriptions/{subscriptionUID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (aooUID != null) localVarPathParams.Add("aooUID", this.Configuration.ApiClient.ParameterToString(aooUID)); // path parameter
            if (uoUID != null) localVarPathParams.Add("uoUID", this.Configuration.ApiClient.ParameterToString(uoUID)); // path parameter
            if (subscriptionUID != null) localVarPathParams.Add("subscriptionUID", this.Configuration.ApiClient.ParameterToString(subscriptionUID)); // path parameter
            if (xAuthorization != null) localVarHeaderParams.Add("X-Authorization", this.Configuration.ApiClient.ParameterToString(xAuthorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReceptionSubscriptionCommit", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Remove a Subscription 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aooUID">Aoo unique identifier</param>
        /// <param name="uoUID">Uo unique identifier</param>
        /// <param name="subscriptionUID">Subscription unique identifier</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns></returns>
        public void ReceptionUnsubscribe (Guid? aooUID, string uoUID, string subscriptionUID, string xAuthorization)
        {
             ReceptionUnsubscribeWithHttpInfo(aooUID, uoUID, subscriptionUID, xAuthorization);
        }

        /// <summary>
        /// Remove a Subscription 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aooUID">Aoo unique identifier</param>
        /// <param name="uoUID">Uo unique identifier</param>
        /// <param name="subscriptionUID">Subscription unique identifier</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ReceptionUnsubscribeWithHttpInfo (Guid? aooUID, string uoUID, string subscriptionUID, string xAuthorization)
        {
            // verify the required parameter 'aooUID' is set
            if (aooUID == null)
                throw new ApiException(400, "Missing required parameter 'aooUID' when calling ReceptionInvoicesNotificationsApi->ReceptionUnsubscribe");
            // verify the required parameter 'uoUID' is set
            if (uoUID == null)
                throw new ApiException(400, "Missing required parameter 'uoUID' when calling ReceptionInvoicesNotificationsApi->ReceptionUnsubscribe");
            // verify the required parameter 'subscriptionUID' is set
            if (subscriptionUID == null)
                throw new ApiException(400, "Missing required parameter 'subscriptionUID' when calling ReceptionInvoicesNotificationsApi->ReceptionUnsubscribe");
            // verify the required parameter 'xAuthorization' is set
            if (xAuthorization == null)
                throw new ApiException(400, "Missing required parameter 'xAuthorization' when calling ReceptionInvoicesNotificationsApi->ReceptionUnsubscribe");

            var localVarPath = "/api/v3.1/reception/notifications/aoos/{aooUID}/uos/{uoUID}/subscriptions/{subscriptionUID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (aooUID != null) localVarPathParams.Add("aooUID", this.Configuration.ApiClient.ParameterToString(aooUID)); // path parameter
            if (uoUID != null) localVarPathParams.Add("uoUID", this.Configuration.ApiClient.ParameterToString(uoUID)); // path parameter
            if (subscriptionUID != null) localVarPathParams.Add("subscriptionUID", this.Configuration.ApiClient.ParameterToString(subscriptionUID)); // path parameter
            if (xAuthorization != null) localVarHeaderParams.Add("X-Authorization", this.Configuration.ApiClient.ParameterToString(xAuthorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReceptionUnsubscribe", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Remove a Subscription 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aooUID">Aoo unique identifier</param>
        /// <param name="uoUID">Uo unique identifier</param>
        /// <param name="subscriptionUID">Subscription unique identifier</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ReceptionUnsubscribeAsync (Guid? aooUID, string uoUID, string subscriptionUID, string xAuthorization)
        {
             await ReceptionUnsubscribeAsyncWithHttpInfo(aooUID, uoUID, subscriptionUID, xAuthorization);

        }

        /// <summary>
        /// Remove a Subscription 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aooUID">Aoo unique identifier</param>
        /// <param name="uoUID">Uo unique identifier</param>
        /// <param name="subscriptionUID">Subscription unique identifier</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ReceptionUnsubscribeAsyncWithHttpInfo (Guid? aooUID, string uoUID, string subscriptionUID, string xAuthorization)
        {
            // verify the required parameter 'aooUID' is set
            if (aooUID == null)
                throw new ApiException(400, "Missing required parameter 'aooUID' when calling ReceptionInvoicesNotificationsApi->ReceptionUnsubscribe");
            // verify the required parameter 'uoUID' is set
            if (uoUID == null)
                throw new ApiException(400, "Missing required parameter 'uoUID' when calling ReceptionInvoicesNotificationsApi->ReceptionUnsubscribe");
            // verify the required parameter 'subscriptionUID' is set
            if (subscriptionUID == null)
                throw new ApiException(400, "Missing required parameter 'subscriptionUID' when calling ReceptionInvoicesNotificationsApi->ReceptionUnsubscribe");
            // verify the required parameter 'xAuthorization' is set
            if (xAuthorization == null)
                throw new ApiException(400, "Missing required parameter 'xAuthorization' when calling ReceptionInvoicesNotificationsApi->ReceptionUnsubscribe");

            var localVarPath = "/api/v3.1/reception/notifications/aoos/{aooUID}/uos/{uoUID}/subscriptions/{subscriptionUID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (aooUID != null) localVarPathParams.Add("aooUID", this.Configuration.ApiClient.ParameterToString(aooUID)); // path parameter
            if (uoUID != null) localVarPathParams.Add("uoUID", this.Configuration.ApiClient.ParameterToString(uoUID)); // path parameter
            if (subscriptionUID != null) localVarPathParams.Add("subscriptionUID", this.Configuration.ApiClient.ParameterToString(subscriptionUID)); // path parameter
            if (xAuthorization != null) localVarHeaderParams.Add("X-Authorization", this.Configuration.ApiClient.ParameterToString(xAuthorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReceptionUnsubscribe", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

    }
}
