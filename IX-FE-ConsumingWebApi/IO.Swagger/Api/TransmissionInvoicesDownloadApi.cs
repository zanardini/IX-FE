/* 
 * IX.FE API V3.1
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v3.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITransmissionInvoicesDownloadApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Return the invoice file and the notifications files in a zip archive
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aooUID">Aoo unique identifier</param>
        /// <param name="uoUID">Uo unique identifier</param>
        /// <param name="invoiceUID">Invoice unique identifier</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream GetTransmissionInvoiceAndNotificationsFile (Guid? aooUID, string uoUID, string invoiceUID, string xAuthorization);

        /// <summary>
        /// Return the invoice file and the notifications files in a zip archive
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aooUID">Aoo unique identifier</param>
        /// <param name="uoUID">Uo unique identifier</param>
        /// <param name="invoiceUID">Invoice unique identifier</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> GetTransmissionInvoiceAndNotificationsFileWithHttpInfo (Guid? aooUID, string uoUID, string invoiceUID, string xAuthorization);
        /// <summary>
        /// Return the invoice batch html
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aooUID">Aoo unique identifier</param>
        /// <param name="uoUID">Uo unique identifier</param>
        /// <param name="invoiceUID">Invoice unique identifier</param>
        /// <param name="xAuthorization">access_token</param>
        /// <param name="htmlFormat">Html document format (optional)</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream GetTransmissionInvoiceBatchHtml (Guid? aooUID, string uoUID, string invoiceUID, string xAuthorization, string htmlFormat = null);

        /// <summary>
        /// Return the invoice batch html
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aooUID">Aoo unique identifier</param>
        /// <param name="uoUID">Uo unique identifier</param>
        /// <param name="invoiceUID">Invoice unique identifier</param>
        /// <param name="xAuthorization">access_token</param>
        /// <param name="htmlFormat">Html document format (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> GetTransmissionInvoiceBatchHtmlWithHttpInfo (Guid? aooUID, string uoUID, string invoiceUID, string xAuthorization, string htmlFormat = null);
        /// <summary>
        /// Return the invoice file
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aooUID">Aoo unique identifier</param>
        /// <param name="uoUID">Uo unique identifier</param>
        /// <param name="invoiceUID">Invoice unique identifier</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream GetTransmissionInvoiceFile (Guid? aooUID, string uoUID, string invoiceUID, string xAuthorization);

        /// <summary>
        /// Return the invoice file
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aooUID">Aoo unique identifier</param>
        /// <param name="uoUID">Uo unique identifier</param>
        /// <param name="invoiceUID">Invoice unique identifier</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> GetTransmissionInvoiceFileWithHttpInfo (Guid? aooUID, string uoUID, string invoiceUID, string xAuthorization);
        /// <summary>
        /// Return the invoice html
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aooUID">Aoo unique identifier</param>
        /// <param name="uoUID">Uo unique identifier</param>
        /// <param name="invoiceUID">Invoice unique identifier</param>
        /// <param name="index">Invoice index</param>
        /// <param name="xAuthorization">access_token</param>
        /// <param name="htmlFormat">Html document format (optional)</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream GetTransmissionInvoiceHtml (Guid? aooUID, string uoUID, string invoiceUID, int? index, string xAuthorization, string htmlFormat = null);

        /// <summary>
        /// Return the invoice html
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aooUID">Aoo unique identifier</param>
        /// <param name="uoUID">Uo unique identifier</param>
        /// <param name="invoiceUID">Invoice unique identifier</param>
        /// <param name="index">Invoice index</param>
        /// <param name="xAuthorization">access_token</param>
        /// <param name="htmlFormat">Html document format (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> GetTransmissionInvoiceHtmlWithHttpInfo (Guid? aooUID, string uoUID, string invoiceUID, int? index, string xAuthorization, string htmlFormat = null);
        /// <summary>
        /// Return the notification file
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aooUID">Aoo unique identifier</param>
        /// <param name="uoUID">Uo unique identifier</param>
        /// <param name="invoiceUID">Invoice unique identifier</param>
        /// <param name="notificationUID">Notification unique identifier</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream GetTransmissionInvoiceNotificationFile (Guid? aooUID, string uoUID, string invoiceUID, string notificationUID, string xAuthorization);

        /// <summary>
        /// Return the notification file
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aooUID">Aoo unique identifier</param>
        /// <param name="uoUID">Uo unique identifier</param>
        /// <param name="invoiceUID">Invoice unique identifier</param>
        /// <param name="notificationUID">Notification unique identifier</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> GetTransmissionInvoiceNotificationFileWithHttpInfo (Guid? aooUID, string uoUID, string invoiceUID, string notificationUID, string xAuthorization);
        /// <summary>
        /// Return the invoice notifications in a zip archive
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aooUID">Aoo unique identifier</param>
        /// <param name="uoUID">Uo unique identifier</param>
        /// <param name="invoiceUID">Invoice unique identifier</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream GetTransmissionInvoiceNotificationsFile (Guid? aooUID, string uoUID, string invoiceUID, string xAuthorization);

        /// <summary>
        /// Return the invoice notifications in a zip archive
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aooUID">Aoo unique identifier</param>
        /// <param name="uoUID">Uo unique identifier</param>
        /// <param name="invoiceUID">Invoice unique identifier</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> GetTransmissionInvoiceNotificationsFileWithHttpInfo (Guid? aooUID, string uoUID, string invoiceUID, string xAuthorization);
        /// <summary>
        /// Return the invoice pdf
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aooUID">Aoo unique identifier</param>
        /// <param name="uoUID">Uo unique identifier</param>
        /// <param name="invoiceUID">Invoice unique identifier</param>
        /// <param name="index">Invoice index</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream GetTransmissionInvoicePdf (Guid? aooUID, string uoUID, string invoiceUID, int? index, string xAuthorization);

        /// <summary>
        /// Return the invoice pdf
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aooUID">Aoo unique identifier</param>
        /// <param name="uoUID">Uo unique identifier</param>
        /// <param name="invoiceUID">Invoice unique identifier</param>
        /// <param name="index">Invoice index</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> GetTransmissionInvoicePdfWithHttpInfo (Guid? aooUID, string uoUID, string invoiceUID, int? index, string xAuthorization);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Return the invoice file and the notifications files in a zip archive
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aooUID">Aoo unique identifier</param>
        /// <param name="uoUID">Uo unique identifier</param>
        /// <param name="invoiceUID">Invoice unique identifier</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> GetTransmissionInvoiceAndNotificationsFileAsync (Guid? aooUID, string uoUID, string invoiceUID, string xAuthorization);

        /// <summary>
        /// Return the invoice file and the notifications files in a zip archive
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aooUID">Aoo unique identifier</param>
        /// <param name="uoUID">Uo unique identifier</param>
        /// <param name="invoiceUID">Invoice unique identifier</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetTransmissionInvoiceAndNotificationsFileAsyncWithHttpInfo (Guid? aooUID, string uoUID, string invoiceUID, string xAuthorization);
        /// <summary>
        /// Return the invoice batch html
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aooUID">Aoo unique identifier</param>
        /// <param name="uoUID">Uo unique identifier</param>
        /// <param name="invoiceUID">Invoice unique identifier</param>
        /// <param name="xAuthorization">access_token</param>
        /// <param name="htmlFormat">Html document format (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> GetTransmissionInvoiceBatchHtmlAsync (Guid? aooUID, string uoUID, string invoiceUID, string xAuthorization, string htmlFormat = null);

        /// <summary>
        /// Return the invoice batch html
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aooUID">Aoo unique identifier</param>
        /// <param name="uoUID">Uo unique identifier</param>
        /// <param name="invoiceUID">Invoice unique identifier</param>
        /// <param name="xAuthorization">access_token</param>
        /// <param name="htmlFormat">Html document format (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetTransmissionInvoiceBatchHtmlAsyncWithHttpInfo (Guid? aooUID, string uoUID, string invoiceUID, string xAuthorization, string htmlFormat = null);
        /// <summary>
        /// Return the invoice file
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aooUID">Aoo unique identifier</param>
        /// <param name="uoUID">Uo unique identifier</param>
        /// <param name="invoiceUID">Invoice unique identifier</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> GetTransmissionInvoiceFileAsync (Guid? aooUID, string uoUID, string invoiceUID, string xAuthorization);

        /// <summary>
        /// Return the invoice file
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aooUID">Aoo unique identifier</param>
        /// <param name="uoUID">Uo unique identifier</param>
        /// <param name="invoiceUID">Invoice unique identifier</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetTransmissionInvoiceFileAsyncWithHttpInfo (Guid? aooUID, string uoUID, string invoiceUID, string xAuthorization);
        /// <summary>
        /// Return the invoice html
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aooUID">Aoo unique identifier</param>
        /// <param name="uoUID">Uo unique identifier</param>
        /// <param name="invoiceUID">Invoice unique identifier</param>
        /// <param name="index">Invoice index</param>
        /// <param name="xAuthorization">access_token</param>
        /// <param name="htmlFormat">Html document format (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> GetTransmissionInvoiceHtmlAsync (Guid? aooUID, string uoUID, string invoiceUID, int? index, string xAuthorization, string htmlFormat = null);

        /// <summary>
        /// Return the invoice html
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aooUID">Aoo unique identifier</param>
        /// <param name="uoUID">Uo unique identifier</param>
        /// <param name="invoiceUID">Invoice unique identifier</param>
        /// <param name="index">Invoice index</param>
        /// <param name="xAuthorization">access_token</param>
        /// <param name="htmlFormat">Html document format (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetTransmissionInvoiceHtmlAsyncWithHttpInfo (Guid? aooUID, string uoUID, string invoiceUID, int? index, string xAuthorization, string htmlFormat = null);
        /// <summary>
        /// Return the notification file
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aooUID">Aoo unique identifier</param>
        /// <param name="uoUID">Uo unique identifier</param>
        /// <param name="invoiceUID">Invoice unique identifier</param>
        /// <param name="notificationUID">Notification unique identifier</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> GetTransmissionInvoiceNotificationFileAsync (Guid? aooUID, string uoUID, string invoiceUID, string notificationUID, string xAuthorization);

        /// <summary>
        /// Return the notification file
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aooUID">Aoo unique identifier</param>
        /// <param name="uoUID">Uo unique identifier</param>
        /// <param name="invoiceUID">Invoice unique identifier</param>
        /// <param name="notificationUID">Notification unique identifier</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetTransmissionInvoiceNotificationFileAsyncWithHttpInfo (Guid? aooUID, string uoUID, string invoiceUID, string notificationUID, string xAuthorization);
        /// <summary>
        /// Return the invoice notifications in a zip archive
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aooUID">Aoo unique identifier</param>
        /// <param name="uoUID">Uo unique identifier</param>
        /// <param name="invoiceUID">Invoice unique identifier</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> GetTransmissionInvoiceNotificationsFileAsync (Guid? aooUID, string uoUID, string invoiceUID, string xAuthorization);

        /// <summary>
        /// Return the invoice notifications in a zip archive
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aooUID">Aoo unique identifier</param>
        /// <param name="uoUID">Uo unique identifier</param>
        /// <param name="invoiceUID">Invoice unique identifier</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetTransmissionInvoiceNotificationsFileAsyncWithHttpInfo (Guid? aooUID, string uoUID, string invoiceUID, string xAuthorization);
        /// <summary>
        /// Return the invoice pdf
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aooUID">Aoo unique identifier</param>
        /// <param name="uoUID">Uo unique identifier</param>
        /// <param name="invoiceUID">Invoice unique identifier</param>
        /// <param name="index">Invoice index</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> GetTransmissionInvoicePdfAsync (Guid? aooUID, string uoUID, string invoiceUID, int? index, string xAuthorization);

        /// <summary>
        /// Return the invoice pdf
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aooUID">Aoo unique identifier</param>
        /// <param name="uoUID">Uo unique identifier</param>
        /// <param name="invoiceUID">Invoice unique identifier</param>
        /// <param name="index">Invoice index</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetTransmissionInvoicePdfAsyncWithHttpInfo (Guid? aooUID, string uoUID, string invoiceUID, int? index, string xAuthorization);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class TransmissionInvoicesDownloadApi : ITransmissionInvoicesDownloadApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="TransmissionInvoicesDownloadApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TransmissionInvoicesDownloadApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TransmissionInvoicesDownloadApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public TransmissionInvoicesDownloadApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Return the invoice file and the notifications files in a zip archive 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aooUID">Aoo unique identifier</param>
        /// <param name="uoUID">Uo unique identifier</param>
        /// <param name="invoiceUID">Invoice unique identifier</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream GetTransmissionInvoiceAndNotificationsFile (Guid? aooUID, string uoUID, string invoiceUID, string xAuthorization)
        {
             ApiResponse<System.IO.Stream> localVarResponse = GetTransmissionInvoiceAndNotificationsFileWithHttpInfo(aooUID, uoUID, invoiceUID, xAuthorization);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Return the invoice file and the notifications files in a zip archive 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aooUID">Aoo unique identifier</param>
        /// <param name="uoUID">Uo unique identifier</param>
        /// <param name="invoiceUID">Invoice unique identifier</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse< System.IO.Stream > GetTransmissionInvoiceAndNotificationsFileWithHttpInfo (Guid? aooUID, string uoUID, string invoiceUID, string xAuthorization)
        {
            // verify the required parameter 'aooUID' is set
            if (aooUID == null)
                throw new ApiException(400, "Missing required parameter 'aooUID' when calling TransmissionInvoicesDownloadApi->GetTransmissionInvoiceAndNotificationsFile");
            // verify the required parameter 'uoUID' is set
            if (uoUID == null)
                throw new ApiException(400, "Missing required parameter 'uoUID' when calling TransmissionInvoicesDownloadApi->GetTransmissionInvoiceAndNotificationsFile");
            // verify the required parameter 'invoiceUID' is set
            if (invoiceUID == null)
                throw new ApiException(400, "Missing required parameter 'invoiceUID' when calling TransmissionInvoicesDownloadApi->GetTransmissionInvoiceAndNotificationsFile");
            // verify the required parameter 'xAuthorization' is set
            if (xAuthorization == null)
                throw new ApiException(400, "Missing required parameter 'xAuthorization' when calling TransmissionInvoicesDownloadApi->GetTransmissionInvoiceAndNotificationsFile");

            var localVarPath = "/api/v3.1/transmission/download/aoos/{aooUID}/uos/{uoUID}/invoices/{invoiceUID}/zip";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/zip"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (aooUID != null) localVarPathParams.Add("aooUID", this.Configuration.ApiClient.ParameterToString(aooUID)); // path parameter
            if (uoUID != null) localVarPathParams.Add("uoUID", this.Configuration.ApiClient.ParameterToString(uoUID)); // path parameter
            if (invoiceUID != null) localVarPathParams.Add("invoiceUID", this.Configuration.ApiClient.ParameterToString(invoiceUID)); // path parameter
            if (xAuthorization != null) localVarHeaderParams.Add("X-Authorization", this.Configuration.ApiClient.ParameterToString(xAuthorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTransmissionInvoiceAndNotificationsFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Return the invoice file and the notifications files in a zip archive 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aooUID">Aoo unique identifier</param>
        /// <param name="uoUID">Uo unique identifier</param>
        /// <param name="invoiceUID">Invoice unique identifier</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> GetTransmissionInvoiceAndNotificationsFileAsync (Guid? aooUID, string uoUID, string invoiceUID, string xAuthorization)
        {
             ApiResponse<System.IO.Stream> localVarResponse = await GetTransmissionInvoiceAndNotificationsFileAsyncWithHttpInfo(aooUID, uoUID, invoiceUID, xAuthorization);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Return the invoice file and the notifications files in a zip archive 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aooUID">Aoo unique identifier</param>
        /// <param name="uoUID">Uo unique identifier</param>
        /// <param name="invoiceUID">Invoice unique identifier</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetTransmissionInvoiceAndNotificationsFileAsyncWithHttpInfo (Guid? aooUID, string uoUID, string invoiceUID, string xAuthorization)
        {
            // verify the required parameter 'aooUID' is set
            if (aooUID == null)
                throw new ApiException(400, "Missing required parameter 'aooUID' when calling TransmissionInvoicesDownloadApi->GetTransmissionInvoiceAndNotificationsFile");
            // verify the required parameter 'uoUID' is set
            if (uoUID == null)
                throw new ApiException(400, "Missing required parameter 'uoUID' when calling TransmissionInvoicesDownloadApi->GetTransmissionInvoiceAndNotificationsFile");
            // verify the required parameter 'invoiceUID' is set
            if (invoiceUID == null)
                throw new ApiException(400, "Missing required parameter 'invoiceUID' when calling TransmissionInvoicesDownloadApi->GetTransmissionInvoiceAndNotificationsFile");
            // verify the required parameter 'xAuthorization' is set
            if (xAuthorization == null)
                throw new ApiException(400, "Missing required parameter 'xAuthorization' when calling TransmissionInvoicesDownloadApi->GetTransmissionInvoiceAndNotificationsFile");

            var localVarPath = "/api/v3.1/transmission/download/aoos/{aooUID}/uos/{uoUID}/invoices/{invoiceUID}/zip";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/zip"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (aooUID != null) localVarPathParams.Add("aooUID", this.Configuration.ApiClient.ParameterToString(aooUID)); // path parameter
            if (uoUID != null) localVarPathParams.Add("uoUID", this.Configuration.ApiClient.ParameterToString(uoUID)); // path parameter
            if (invoiceUID != null) localVarPathParams.Add("invoiceUID", this.Configuration.ApiClient.ParameterToString(invoiceUID)); // path parameter
            if (xAuthorization != null) localVarHeaderParams.Add("X-Authorization", this.Configuration.ApiClient.ParameterToString(xAuthorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTransmissionInvoiceAndNotificationsFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Return the invoice batch html 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aooUID">Aoo unique identifier</param>
        /// <param name="uoUID">Uo unique identifier</param>
        /// <param name="invoiceUID">Invoice unique identifier</param>
        /// <param name="xAuthorization">access_token</param>
        /// <param name="htmlFormat">Html document format (optional)</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream GetTransmissionInvoiceBatchHtml (Guid? aooUID, string uoUID, string invoiceUID, string xAuthorization, string htmlFormat = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = GetTransmissionInvoiceBatchHtmlWithHttpInfo(aooUID, uoUID, invoiceUID, xAuthorization, htmlFormat);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Return the invoice batch html 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aooUID">Aoo unique identifier</param>
        /// <param name="uoUID">Uo unique identifier</param>
        /// <param name="invoiceUID">Invoice unique identifier</param>
        /// <param name="xAuthorization">access_token</param>
        /// <param name="htmlFormat">Html document format (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse< System.IO.Stream > GetTransmissionInvoiceBatchHtmlWithHttpInfo (Guid? aooUID, string uoUID, string invoiceUID, string xAuthorization, string htmlFormat = null)
        {
            // verify the required parameter 'aooUID' is set
            if (aooUID == null)
                throw new ApiException(400, "Missing required parameter 'aooUID' when calling TransmissionInvoicesDownloadApi->GetTransmissionInvoiceBatchHtml");
            // verify the required parameter 'uoUID' is set
            if (uoUID == null)
                throw new ApiException(400, "Missing required parameter 'uoUID' when calling TransmissionInvoicesDownloadApi->GetTransmissionInvoiceBatchHtml");
            // verify the required parameter 'invoiceUID' is set
            if (invoiceUID == null)
                throw new ApiException(400, "Missing required parameter 'invoiceUID' when calling TransmissionInvoicesDownloadApi->GetTransmissionInvoiceBatchHtml");
            // verify the required parameter 'xAuthorization' is set
            if (xAuthorization == null)
                throw new ApiException(400, "Missing required parameter 'xAuthorization' when calling TransmissionInvoicesDownloadApi->GetTransmissionInvoiceBatchHtml");

            var localVarPath = "/api/v3.1/transmission/download/aoos/{aooUID}/uos/{uoUID}/invoices/{invoiceUID}/html";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/html"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (aooUID != null) localVarPathParams.Add("aooUID", this.Configuration.ApiClient.ParameterToString(aooUID)); // path parameter
            if (uoUID != null) localVarPathParams.Add("uoUID", this.Configuration.ApiClient.ParameterToString(uoUID)); // path parameter
            if (invoiceUID != null) localVarPathParams.Add("invoiceUID", this.Configuration.ApiClient.ParameterToString(invoiceUID)); // path parameter
            if (htmlFormat != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "htmlFormat", htmlFormat)); // query parameter
            if (xAuthorization != null) localVarHeaderParams.Add("X-Authorization", this.Configuration.ApiClient.ParameterToString(xAuthorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTransmissionInvoiceBatchHtml", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Return the invoice batch html 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aooUID">Aoo unique identifier</param>
        /// <param name="uoUID">Uo unique identifier</param>
        /// <param name="invoiceUID">Invoice unique identifier</param>
        /// <param name="xAuthorization">access_token</param>
        /// <param name="htmlFormat">Html document format (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> GetTransmissionInvoiceBatchHtmlAsync (Guid? aooUID, string uoUID, string invoiceUID, string xAuthorization, string htmlFormat = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = await GetTransmissionInvoiceBatchHtmlAsyncWithHttpInfo(aooUID, uoUID, invoiceUID, xAuthorization, htmlFormat);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Return the invoice batch html 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aooUID">Aoo unique identifier</param>
        /// <param name="uoUID">Uo unique identifier</param>
        /// <param name="invoiceUID">Invoice unique identifier</param>
        /// <param name="xAuthorization">access_token</param>
        /// <param name="htmlFormat">Html document format (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetTransmissionInvoiceBatchHtmlAsyncWithHttpInfo (Guid? aooUID, string uoUID, string invoiceUID, string xAuthorization, string htmlFormat = null)
        {
            // verify the required parameter 'aooUID' is set
            if (aooUID == null)
                throw new ApiException(400, "Missing required parameter 'aooUID' when calling TransmissionInvoicesDownloadApi->GetTransmissionInvoiceBatchHtml");
            // verify the required parameter 'uoUID' is set
            if (uoUID == null)
                throw new ApiException(400, "Missing required parameter 'uoUID' when calling TransmissionInvoicesDownloadApi->GetTransmissionInvoiceBatchHtml");
            // verify the required parameter 'invoiceUID' is set
            if (invoiceUID == null)
                throw new ApiException(400, "Missing required parameter 'invoiceUID' when calling TransmissionInvoicesDownloadApi->GetTransmissionInvoiceBatchHtml");
            // verify the required parameter 'xAuthorization' is set
            if (xAuthorization == null)
                throw new ApiException(400, "Missing required parameter 'xAuthorization' when calling TransmissionInvoicesDownloadApi->GetTransmissionInvoiceBatchHtml");

            var localVarPath = "/api/v3.1/transmission/download/aoos/{aooUID}/uos/{uoUID}/invoices/{invoiceUID}/html";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/html"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (aooUID != null) localVarPathParams.Add("aooUID", this.Configuration.ApiClient.ParameterToString(aooUID)); // path parameter
            if (uoUID != null) localVarPathParams.Add("uoUID", this.Configuration.ApiClient.ParameterToString(uoUID)); // path parameter
            if (invoiceUID != null) localVarPathParams.Add("invoiceUID", this.Configuration.ApiClient.ParameterToString(invoiceUID)); // path parameter
            if (htmlFormat != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "htmlFormat", htmlFormat)); // query parameter
            if (xAuthorization != null) localVarHeaderParams.Add("X-Authorization", this.Configuration.ApiClient.ParameterToString(xAuthorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTransmissionInvoiceBatchHtml", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Return the invoice file 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aooUID">Aoo unique identifier</param>
        /// <param name="uoUID">Uo unique identifier</param>
        /// <param name="invoiceUID">Invoice unique identifier</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream GetTransmissionInvoiceFile (Guid? aooUID, string uoUID, string invoiceUID, string xAuthorization)
        {
             ApiResponse<System.IO.Stream> localVarResponse = GetTransmissionInvoiceFileWithHttpInfo(aooUID, uoUID, invoiceUID, xAuthorization);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Return the invoice file 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aooUID">Aoo unique identifier</param>
        /// <param name="uoUID">Uo unique identifier</param>
        /// <param name="invoiceUID">Invoice unique identifier</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse< System.IO.Stream > GetTransmissionInvoiceFileWithHttpInfo (Guid? aooUID, string uoUID, string invoiceUID, string xAuthorization)
        {
            // verify the required parameter 'aooUID' is set
            if (aooUID == null)
                throw new ApiException(400, "Missing required parameter 'aooUID' when calling TransmissionInvoicesDownloadApi->GetTransmissionInvoiceFile");
            // verify the required parameter 'uoUID' is set
            if (uoUID == null)
                throw new ApiException(400, "Missing required parameter 'uoUID' when calling TransmissionInvoicesDownloadApi->GetTransmissionInvoiceFile");
            // verify the required parameter 'invoiceUID' is set
            if (invoiceUID == null)
                throw new ApiException(400, "Missing required parameter 'invoiceUID' when calling TransmissionInvoicesDownloadApi->GetTransmissionInvoiceFile");
            // verify the required parameter 'xAuthorization' is set
            if (xAuthorization == null)
                throw new ApiException(400, "Missing required parameter 'xAuthorization' when calling TransmissionInvoicesDownloadApi->GetTransmissionInvoiceFile");

            var localVarPath = "/api/v3.1/transmission/download/aoos/{aooUID}/uos/{uoUID}/invoices/{invoiceUID}/file";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (aooUID != null) localVarPathParams.Add("aooUID", this.Configuration.ApiClient.ParameterToString(aooUID)); // path parameter
            if (uoUID != null) localVarPathParams.Add("uoUID", this.Configuration.ApiClient.ParameterToString(uoUID)); // path parameter
            if (invoiceUID != null) localVarPathParams.Add("invoiceUID", this.Configuration.ApiClient.ParameterToString(invoiceUID)); // path parameter
            if (xAuthorization != null) localVarHeaderParams.Add("X-Authorization", this.Configuration.ApiClient.ParameterToString(xAuthorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTransmissionInvoiceFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Return the invoice file 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aooUID">Aoo unique identifier</param>
        /// <param name="uoUID">Uo unique identifier</param>
        /// <param name="invoiceUID">Invoice unique identifier</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> GetTransmissionInvoiceFileAsync (Guid? aooUID, string uoUID, string invoiceUID, string xAuthorization)
        {
             ApiResponse<System.IO.Stream> localVarResponse = await GetTransmissionInvoiceFileAsyncWithHttpInfo(aooUID, uoUID, invoiceUID, xAuthorization);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Return the invoice file 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aooUID">Aoo unique identifier</param>
        /// <param name="uoUID">Uo unique identifier</param>
        /// <param name="invoiceUID">Invoice unique identifier</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetTransmissionInvoiceFileAsyncWithHttpInfo (Guid? aooUID, string uoUID, string invoiceUID, string xAuthorization)
        {
            // verify the required parameter 'aooUID' is set
            if (aooUID == null)
                throw new ApiException(400, "Missing required parameter 'aooUID' when calling TransmissionInvoicesDownloadApi->GetTransmissionInvoiceFile");
            // verify the required parameter 'uoUID' is set
            if (uoUID == null)
                throw new ApiException(400, "Missing required parameter 'uoUID' when calling TransmissionInvoicesDownloadApi->GetTransmissionInvoiceFile");
            // verify the required parameter 'invoiceUID' is set
            if (invoiceUID == null)
                throw new ApiException(400, "Missing required parameter 'invoiceUID' when calling TransmissionInvoicesDownloadApi->GetTransmissionInvoiceFile");
            // verify the required parameter 'xAuthorization' is set
            if (xAuthorization == null)
                throw new ApiException(400, "Missing required parameter 'xAuthorization' when calling TransmissionInvoicesDownloadApi->GetTransmissionInvoiceFile");

            var localVarPath = "/api/v3.1/transmission/download/aoos/{aooUID}/uos/{uoUID}/invoices/{invoiceUID}/file";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (aooUID != null) localVarPathParams.Add("aooUID", this.Configuration.ApiClient.ParameterToString(aooUID)); // path parameter
            if (uoUID != null) localVarPathParams.Add("uoUID", this.Configuration.ApiClient.ParameterToString(uoUID)); // path parameter
            if (invoiceUID != null) localVarPathParams.Add("invoiceUID", this.Configuration.ApiClient.ParameterToString(invoiceUID)); // path parameter
            if (xAuthorization != null) localVarHeaderParams.Add("X-Authorization", this.Configuration.ApiClient.ParameterToString(xAuthorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTransmissionInvoiceFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Return the invoice html 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aooUID">Aoo unique identifier</param>
        /// <param name="uoUID">Uo unique identifier</param>
        /// <param name="invoiceUID">Invoice unique identifier</param>
        /// <param name="index">Invoice index</param>
        /// <param name="xAuthorization">access_token</param>
        /// <param name="htmlFormat">Html document format (optional)</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream GetTransmissionInvoiceHtml (Guid? aooUID, string uoUID, string invoiceUID, int? index, string xAuthorization, string htmlFormat = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = GetTransmissionInvoiceHtmlWithHttpInfo(aooUID, uoUID, invoiceUID, index, xAuthorization, htmlFormat);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Return the invoice html 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aooUID">Aoo unique identifier</param>
        /// <param name="uoUID">Uo unique identifier</param>
        /// <param name="invoiceUID">Invoice unique identifier</param>
        /// <param name="index">Invoice index</param>
        /// <param name="xAuthorization">access_token</param>
        /// <param name="htmlFormat">Html document format (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse< System.IO.Stream > GetTransmissionInvoiceHtmlWithHttpInfo (Guid? aooUID, string uoUID, string invoiceUID, int? index, string xAuthorization, string htmlFormat = null)
        {
            // verify the required parameter 'aooUID' is set
            if (aooUID == null)
                throw new ApiException(400, "Missing required parameter 'aooUID' when calling TransmissionInvoicesDownloadApi->GetTransmissionInvoiceHtml");
            // verify the required parameter 'uoUID' is set
            if (uoUID == null)
                throw new ApiException(400, "Missing required parameter 'uoUID' when calling TransmissionInvoicesDownloadApi->GetTransmissionInvoiceHtml");
            // verify the required parameter 'invoiceUID' is set
            if (invoiceUID == null)
                throw new ApiException(400, "Missing required parameter 'invoiceUID' when calling TransmissionInvoicesDownloadApi->GetTransmissionInvoiceHtml");
            // verify the required parameter 'index' is set
            if (index == null)
                throw new ApiException(400, "Missing required parameter 'index' when calling TransmissionInvoicesDownloadApi->GetTransmissionInvoiceHtml");
            // verify the required parameter 'xAuthorization' is set
            if (xAuthorization == null)
                throw new ApiException(400, "Missing required parameter 'xAuthorization' when calling TransmissionInvoicesDownloadApi->GetTransmissionInvoiceHtml");

            var localVarPath = "/api/v3.1/transmission/download/aoos/{aooUID}/uos/{uoUID}/invoices/{invoiceUID}/{index}/html";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/html"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (aooUID != null) localVarPathParams.Add("aooUID", this.Configuration.ApiClient.ParameterToString(aooUID)); // path parameter
            if (uoUID != null) localVarPathParams.Add("uoUID", this.Configuration.ApiClient.ParameterToString(uoUID)); // path parameter
            if (invoiceUID != null) localVarPathParams.Add("invoiceUID", this.Configuration.ApiClient.ParameterToString(invoiceUID)); // path parameter
            if (index != null) localVarPathParams.Add("index", this.Configuration.ApiClient.ParameterToString(index)); // path parameter
            if (htmlFormat != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "htmlFormat", htmlFormat)); // query parameter
            if (xAuthorization != null) localVarHeaderParams.Add("X-Authorization", this.Configuration.ApiClient.ParameterToString(xAuthorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTransmissionInvoiceHtml", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Return the invoice html 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aooUID">Aoo unique identifier</param>
        /// <param name="uoUID">Uo unique identifier</param>
        /// <param name="invoiceUID">Invoice unique identifier</param>
        /// <param name="index">Invoice index</param>
        /// <param name="xAuthorization">access_token</param>
        /// <param name="htmlFormat">Html document format (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> GetTransmissionInvoiceHtmlAsync (Guid? aooUID, string uoUID, string invoiceUID, int? index, string xAuthorization, string htmlFormat = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = await GetTransmissionInvoiceHtmlAsyncWithHttpInfo(aooUID, uoUID, invoiceUID, index, xAuthorization, htmlFormat);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Return the invoice html 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aooUID">Aoo unique identifier</param>
        /// <param name="uoUID">Uo unique identifier</param>
        /// <param name="invoiceUID">Invoice unique identifier</param>
        /// <param name="index">Invoice index</param>
        /// <param name="xAuthorization">access_token</param>
        /// <param name="htmlFormat">Html document format (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetTransmissionInvoiceHtmlAsyncWithHttpInfo (Guid? aooUID, string uoUID, string invoiceUID, int? index, string xAuthorization, string htmlFormat = null)
        {
            // verify the required parameter 'aooUID' is set
            if (aooUID == null)
                throw new ApiException(400, "Missing required parameter 'aooUID' when calling TransmissionInvoicesDownloadApi->GetTransmissionInvoiceHtml");
            // verify the required parameter 'uoUID' is set
            if (uoUID == null)
                throw new ApiException(400, "Missing required parameter 'uoUID' when calling TransmissionInvoicesDownloadApi->GetTransmissionInvoiceHtml");
            // verify the required parameter 'invoiceUID' is set
            if (invoiceUID == null)
                throw new ApiException(400, "Missing required parameter 'invoiceUID' when calling TransmissionInvoicesDownloadApi->GetTransmissionInvoiceHtml");
            // verify the required parameter 'index' is set
            if (index == null)
                throw new ApiException(400, "Missing required parameter 'index' when calling TransmissionInvoicesDownloadApi->GetTransmissionInvoiceHtml");
            // verify the required parameter 'xAuthorization' is set
            if (xAuthorization == null)
                throw new ApiException(400, "Missing required parameter 'xAuthorization' when calling TransmissionInvoicesDownloadApi->GetTransmissionInvoiceHtml");

            var localVarPath = "/api/v3.1/transmission/download/aoos/{aooUID}/uos/{uoUID}/invoices/{invoiceUID}/{index}/html";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/html"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (aooUID != null) localVarPathParams.Add("aooUID", this.Configuration.ApiClient.ParameterToString(aooUID)); // path parameter
            if (uoUID != null) localVarPathParams.Add("uoUID", this.Configuration.ApiClient.ParameterToString(uoUID)); // path parameter
            if (invoiceUID != null) localVarPathParams.Add("invoiceUID", this.Configuration.ApiClient.ParameterToString(invoiceUID)); // path parameter
            if (index != null) localVarPathParams.Add("index", this.Configuration.ApiClient.ParameterToString(index)); // path parameter
            if (htmlFormat != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "htmlFormat", htmlFormat)); // query parameter
            if (xAuthorization != null) localVarHeaderParams.Add("X-Authorization", this.Configuration.ApiClient.ParameterToString(xAuthorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTransmissionInvoiceHtml", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Return the notification file 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aooUID">Aoo unique identifier</param>
        /// <param name="uoUID">Uo unique identifier</param>
        /// <param name="invoiceUID">Invoice unique identifier</param>
        /// <param name="notificationUID">Notification unique identifier</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream GetTransmissionInvoiceNotificationFile (Guid? aooUID, string uoUID, string invoiceUID, string notificationUID, string xAuthorization)
        {
             ApiResponse<System.IO.Stream> localVarResponse = GetTransmissionInvoiceNotificationFileWithHttpInfo(aooUID, uoUID, invoiceUID, notificationUID, xAuthorization);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Return the notification file 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aooUID">Aoo unique identifier</param>
        /// <param name="uoUID">Uo unique identifier</param>
        /// <param name="invoiceUID">Invoice unique identifier</param>
        /// <param name="notificationUID">Notification unique identifier</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse< System.IO.Stream > GetTransmissionInvoiceNotificationFileWithHttpInfo (Guid? aooUID, string uoUID, string invoiceUID, string notificationUID, string xAuthorization)
        {
            // verify the required parameter 'aooUID' is set
            if (aooUID == null)
                throw new ApiException(400, "Missing required parameter 'aooUID' when calling TransmissionInvoicesDownloadApi->GetTransmissionInvoiceNotificationFile");
            // verify the required parameter 'uoUID' is set
            if (uoUID == null)
                throw new ApiException(400, "Missing required parameter 'uoUID' when calling TransmissionInvoicesDownloadApi->GetTransmissionInvoiceNotificationFile");
            // verify the required parameter 'invoiceUID' is set
            if (invoiceUID == null)
                throw new ApiException(400, "Missing required parameter 'invoiceUID' when calling TransmissionInvoicesDownloadApi->GetTransmissionInvoiceNotificationFile");
            // verify the required parameter 'notificationUID' is set
            if (notificationUID == null)
                throw new ApiException(400, "Missing required parameter 'notificationUID' when calling TransmissionInvoicesDownloadApi->GetTransmissionInvoiceNotificationFile");
            // verify the required parameter 'xAuthorization' is set
            if (xAuthorization == null)
                throw new ApiException(400, "Missing required parameter 'xAuthorization' when calling TransmissionInvoicesDownloadApi->GetTransmissionInvoiceNotificationFile");

            var localVarPath = "/api/v3.1/transmission/download/aoos/{aooUID}/uos/{uoUID}/invoices/{invoiceUID}/notifications/{notificationUID}/file";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (aooUID != null) localVarPathParams.Add("aooUID", this.Configuration.ApiClient.ParameterToString(aooUID)); // path parameter
            if (uoUID != null) localVarPathParams.Add("uoUID", this.Configuration.ApiClient.ParameterToString(uoUID)); // path parameter
            if (invoiceUID != null) localVarPathParams.Add("invoiceUID", this.Configuration.ApiClient.ParameterToString(invoiceUID)); // path parameter
            if (notificationUID != null) localVarPathParams.Add("notificationUID", this.Configuration.ApiClient.ParameterToString(notificationUID)); // path parameter
            if (xAuthorization != null) localVarHeaderParams.Add("X-Authorization", this.Configuration.ApiClient.ParameterToString(xAuthorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTransmissionInvoiceNotificationFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Return the notification file 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aooUID">Aoo unique identifier</param>
        /// <param name="uoUID">Uo unique identifier</param>
        /// <param name="invoiceUID">Invoice unique identifier</param>
        /// <param name="notificationUID">Notification unique identifier</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> GetTransmissionInvoiceNotificationFileAsync (Guid? aooUID, string uoUID, string invoiceUID, string notificationUID, string xAuthorization)
        {
             ApiResponse<System.IO.Stream> localVarResponse = await GetTransmissionInvoiceNotificationFileAsyncWithHttpInfo(aooUID, uoUID, invoiceUID, notificationUID, xAuthorization);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Return the notification file 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aooUID">Aoo unique identifier</param>
        /// <param name="uoUID">Uo unique identifier</param>
        /// <param name="invoiceUID">Invoice unique identifier</param>
        /// <param name="notificationUID">Notification unique identifier</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetTransmissionInvoiceNotificationFileAsyncWithHttpInfo (Guid? aooUID, string uoUID, string invoiceUID, string notificationUID, string xAuthorization)
        {
            // verify the required parameter 'aooUID' is set
            if (aooUID == null)
                throw new ApiException(400, "Missing required parameter 'aooUID' when calling TransmissionInvoicesDownloadApi->GetTransmissionInvoiceNotificationFile");
            // verify the required parameter 'uoUID' is set
            if (uoUID == null)
                throw new ApiException(400, "Missing required parameter 'uoUID' when calling TransmissionInvoicesDownloadApi->GetTransmissionInvoiceNotificationFile");
            // verify the required parameter 'invoiceUID' is set
            if (invoiceUID == null)
                throw new ApiException(400, "Missing required parameter 'invoiceUID' when calling TransmissionInvoicesDownloadApi->GetTransmissionInvoiceNotificationFile");
            // verify the required parameter 'notificationUID' is set
            if (notificationUID == null)
                throw new ApiException(400, "Missing required parameter 'notificationUID' when calling TransmissionInvoicesDownloadApi->GetTransmissionInvoiceNotificationFile");
            // verify the required parameter 'xAuthorization' is set
            if (xAuthorization == null)
                throw new ApiException(400, "Missing required parameter 'xAuthorization' when calling TransmissionInvoicesDownloadApi->GetTransmissionInvoiceNotificationFile");

            var localVarPath = "/api/v3.1/transmission/download/aoos/{aooUID}/uos/{uoUID}/invoices/{invoiceUID}/notifications/{notificationUID}/file";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (aooUID != null) localVarPathParams.Add("aooUID", this.Configuration.ApiClient.ParameterToString(aooUID)); // path parameter
            if (uoUID != null) localVarPathParams.Add("uoUID", this.Configuration.ApiClient.ParameterToString(uoUID)); // path parameter
            if (invoiceUID != null) localVarPathParams.Add("invoiceUID", this.Configuration.ApiClient.ParameterToString(invoiceUID)); // path parameter
            if (notificationUID != null) localVarPathParams.Add("notificationUID", this.Configuration.ApiClient.ParameterToString(notificationUID)); // path parameter
            if (xAuthorization != null) localVarHeaderParams.Add("X-Authorization", this.Configuration.ApiClient.ParameterToString(xAuthorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTransmissionInvoiceNotificationFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Return the invoice notifications in a zip archive 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aooUID">Aoo unique identifier</param>
        /// <param name="uoUID">Uo unique identifier</param>
        /// <param name="invoiceUID">Invoice unique identifier</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream GetTransmissionInvoiceNotificationsFile (Guid? aooUID, string uoUID, string invoiceUID, string xAuthorization)
        {
             ApiResponse<System.IO.Stream> localVarResponse = GetTransmissionInvoiceNotificationsFileWithHttpInfo(aooUID, uoUID, invoiceUID, xAuthorization);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Return the invoice notifications in a zip archive 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aooUID">Aoo unique identifier</param>
        /// <param name="uoUID">Uo unique identifier</param>
        /// <param name="invoiceUID">Invoice unique identifier</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse< System.IO.Stream > GetTransmissionInvoiceNotificationsFileWithHttpInfo (Guid? aooUID, string uoUID, string invoiceUID, string xAuthorization)
        {
            // verify the required parameter 'aooUID' is set
            if (aooUID == null)
                throw new ApiException(400, "Missing required parameter 'aooUID' when calling TransmissionInvoicesDownloadApi->GetTransmissionInvoiceNotificationsFile");
            // verify the required parameter 'uoUID' is set
            if (uoUID == null)
                throw new ApiException(400, "Missing required parameter 'uoUID' when calling TransmissionInvoicesDownloadApi->GetTransmissionInvoiceNotificationsFile");
            // verify the required parameter 'invoiceUID' is set
            if (invoiceUID == null)
                throw new ApiException(400, "Missing required parameter 'invoiceUID' when calling TransmissionInvoicesDownloadApi->GetTransmissionInvoiceNotificationsFile");
            // verify the required parameter 'xAuthorization' is set
            if (xAuthorization == null)
                throw new ApiException(400, "Missing required parameter 'xAuthorization' when calling TransmissionInvoicesDownloadApi->GetTransmissionInvoiceNotificationsFile");

            var localVarPath = "/api/v3.1/transmission/download/aoos/{aooUID}/uos/{uoUID}/invoices/{invoiceUID}/notifications/zip";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/zip"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (aooUID != null) localVarPathParams.Add("aooUID", this.Configuration.ApiClient.ParameterToString(aooUID)); // path parameter
            if (uoUID != null) localVarPathParams.Add("uoUID", this.Configuration.ApiClient.ParameterToString(uoUID)); // path parameter
            if (invoiceUID != null) localVarPathParams.Add("invoiceUID", this.Configuration.ApiClient.ParameterToString(invoiceUID)); // path parameter
            if (xAuthorization != null) localVarHeaderParams.Add("X-Authorization", this.Configuration.ApiClient.ParameterToString(xAuthorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTransmissionInvoiceNotificationsFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Return the invoice notifications in a zip archive 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aooUID">Aoo unique identifier</param>
        /// <param name="uoUID">Uo unique identifier</param>
        /// <param name="invoiceUID">Invoice unique identifier</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> GetTransmissionInvoiceNotificationsFileAsync (Guid? aooUID, string uoUID, string invoiceUID, string xAuthorization)
        {
             ApiResponse<System.IO.Stream> localVarResponse = await GetTransmissionInvoiceNotificationsFileAsyncWithHttpInfo(aooUID, uoUID, invoiceUID, xAuthorization);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Return the invoice notifications in a zip archive 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aooUID">Aoo unique identifier</param>
        /// <param name="uoUID">Uo unique identifier</param>
        /// <param name="invoiceUID">Invoice unique identifier</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetTransmissionInvoiceNotificationsFileAsyncWithHttpInfo (Guid? aooUID, string uoUID, string invoiceUID, string xAuthorization)
        {
            // verify the required parameter 'aooUID' is set
            if (aooUID == null)
                throw new ApiException(400, "Missing required parameter 'aooUID' when calling TransmissionInvoicesDownloadApi->GetTransmissionInvoiceNotificationsFile");
            // verify the required parameter 'uoUID' is set
            if (uoUID == null)
                throw new ApiException(400, "Missing required parameter 'uoUID' when calling TransmissionInvoicesDownloadApi->GetTransmissionInvoiceNotificationsFile");
            // verify the required parameter 'invoiceUID' is set
            if (invoiceUID == null)
                throw new ApiException(400, "Missing required parameter 'invoiceUID' when calling TransmissionInvoicesDownloadApi->GetTransmissionInvoiceNotificationsFile");
            // verify the required parameter 'xAuthorization' is set
            if (xAuthorization == null)
                throw new ApiException(400, "Missing required parameter 'xAuthorization' when calling TransmissionInvoicesDownloadApi->GetTransmissionInvoiceNotificationsFile");

            var localVarPath = "/api/v3.1/transmission/download/aoos/{aooUID}/uos/{uoUID}/invoices/{invoiceUID}/notifications/zip";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/zip"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (aooUID != null) localVarPathParams.Add("aooUID", this.Configuration.ApiClient.ParameterToString(aooUID)); // path parameter
            if (uoUID != null) localVarPathParams.Add("uoUID", this.Configuration.ApiClient.ParameterToString(uoUID)); // path parameter
            if (invoiceUID != null) localVarPathParams.Add("invoiceUID", this.Configuration.ApiClient.ParameterToString(invoiceUID)); // path parameter
            if (xAuthorization != null) localVarHeaderParams.Add("X-Authorization", this.Configuration.ApiClient.ParameterToString(xAuthorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTransmissionInvoiceNotificationsFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Return the invoice pdf 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aooUID">Aoo unique identifier</param>
        /// <param name="uoUID">Uo unique identifier</param>
        /// <param name="invoiceUID">Invoice unique identifier</param>
        /// <param name="index">Invoice index</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream GetTransmissionInvoicePdf (Guid? aooUID, string uoUID, string invoiceUID, int? index, string xAuthorization)
        {
             ApiResponse<System.IO.Stream> localVarResponse = GetTransmissionInvoicePdfWithHttpInfo(aooUID, uoUID, invoiceUID, index, xAuthorization);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Return the invoice pdf 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aooUID">Aoo unique identifier</param>
        /// <param name="uoUID">Uo unique identifier</param>
        /// <param name="invoiceUID">Invoice unique identifier</param>
        /// <param name="index">Invoice index</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse< System.IO.Stream > GetTransmissionInvoicePdfWithHttpInfo (Guid? aooUID, string uoUID, string invoiceUID, int? index, string xAuthorization)
        {
            // verify the required parameter 'aooUID' is set
            if (aooUID == null)
                throw new ApiException(400, "Missing required parameter 'aooUID' when calling TransmissionInvoicesDownloadApi->GetTransmissionInvoicePdf");
            // verify the required parameter 'uoUID' is set
            if (uoUID == null)
                throw new ApiException(400, "Missing required parameter 'uoUID' when calling TransmissionInvoicesDownloadApi->GetTransmissionInvoicePdf");
            // verify the required parameter 'invoiceUID' is set
            if (invoiceUID == null)
                throw new ApiException(400, "Missing required parameter 'invoiceUID' when calling TransmissionInvoicesDownloadApi->GetTransmissionInvoicePdf");
            // verify the required parameter 'index' is set
            if (index == null)
                throw new ApiException(400, "Missing required parameter 'index' when calling TransmissionInvoicesDownloadApi->GetTransmissionInvoicePdf");
            // verify the required parameter 'xAuthorization' is set
            if (xAuthorization == null)
                throw new ApiException(400, "Missing required parameter 'xAuthorization' when calling TransmissionInvoicesDownloadApi->GetTransmissionInvoicePdf");

            var localVarPath = "/api/v3.1/transmission/download/aoos/{aooUID}/uos/{uoUID}/invoices/{invoiceUID}/{index}/pdf";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/pdf"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (aooUID != null) localVarPathParams.Add("aooUID", this.Configuration.ApiClient.ParameterToString(aooUID)); // path parameter
            if (uoUID != null) localVarPathParams.Add("uoUID", this.Configuration.ApiClient.ParameterToString(uoUID)); // path parameter
            if (invoiceUID != null) localVarPathParams.Add("invoiceUID", this.Configuration.ApiClient.ParameterToString(invoiceUID)); // path parameter
            if (index != null) localVarPathParams.Add("index", this.Configuration.ApiClient.ParameterToString(index)); // path parameter
            if (xAuthorization != null) localVarHeaderParams.Add("X-Authorization", this.Configuration.ApiClient.ParameterToString(xAuthorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTransmissionInvoicePdf", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Return the invoice pdf 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aooUID">Aoo unique identifier</param>
        /// <param name="uoUID">Uo unique identifier</param>
        /// <param name="invoiceUID">Invoice unique identifier</param>
        /// <param name="index">Invoice index</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> GetTransmissionInvoicePdfAsync (Guid? aooUID, string uoUID, string invoiceUID, int? index, string xAuthorization)
        {
             ApiResponse<System.IO.Stream> localVarResponse = await GetTransmissionInvoicePdfAsyncWithHttpInfo(aooUID, uoUID, invoiceUID, index, xAuthorization);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Return the invoice pdf 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aooUID">Aoo unique identifier</param>
        /// <param name="uoUID">Uo unique identifier</param>
        /// <param name="invoiceUID">Invoice unique identifier</param>
        /// <param name="index">Invoice index</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetTransmissionInvoicePdfAsyncWithHttpInfo (Guid? aooUID, string uoUID, string invoiceUID, int? index, string xAuthorization)
        {
            // verify the required parameter 'aooUID' is set
            if (aooUID == null)
                throw new ApiException(400, "Missing required parameter 'aooUID' when calling TransmissionInvoicesDownloadApi->GetTransmissionInvoicePdf");
            // verify the required parameter 'uoUID' is set
            if (uoUID == null)
                throw new ApiException(400, "Missing required parameter 'uoUID' when calling TransmissionInvoicesDownloadApi->GetTransmissionInvoicePdf");
            // verify the required parameter 'invoiceUID' is set
            if (invoiceUID == null)
                throw new ApiException(400, "Missing required parameter 'invoiceUID' when calling TransmissionInvoicesDownloadApi->GetTransmissionInvoicePdf");
            // verify the required parameter 'index' is set
            if (index == null)
                throw new ApiException(400, "Missing required parameter 'index' when calling TransmissionInvoicesDownloadApi->GetTransmissionInvoicePdf");
            // verify the required parameter 'xAuthorization' is set
            if (xAuthorization == null)
                throw new ApiException(400, "Missing required parameter 'xAuthorization' when calling TransmissionInvoicesDownloadApi->GetTransmissionInvoicePdf");

            var localVarPath = "/api/v3.1/transmission/download/aoos/{aooUID}/uos/{uoUID}/invoices/{invoiceUID}/{index}/pdf";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/pdf"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (aooUID != null) localVarPathParams.Add("aooUID", this.Configuration.ApiClient.ParameterToString(aooUID)); // path parameter
            if (uoUID != null) localVarPathParams.Add("uoUID", this.Configuration.ApiClient.ParameterToString(uoUID)); // path parameter
            if (invoiceUID != null) localVarPathParams.Add("invoiceUID", this.Configuration.ApiClient.ParameterToString(invoiceUID)); // path parameter
            if (index != null) localVarPathParams.Add("index", this.Configuration.ApiClient.ParameterToString(index)); // path parameter
            if (xAuthorization != null) localVarHeaderParams.Add("X-Authorization", this.Configuration.ApiClient.ParameterToString(xAuthorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTransmissionInvoicePdf", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

    }
}
