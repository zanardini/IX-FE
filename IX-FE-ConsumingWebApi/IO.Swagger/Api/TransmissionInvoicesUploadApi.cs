/* 
 * IX.FE API V3.1
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v3.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITransmissionInvoicesUploadApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Upload an xml\\xml.p7m invoice
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aooUID">Aoo unique identifier</param>
        /// <param name="uoUID">Uo unique identifier</param>
        /// <param name="invoiceUploadRequest">Invoice upload request</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>TransmissionUploadInvoiceResponse</returns>
        TransmissionUploadInvoiceResponse TransmissionUploadInvoice (Guid? aooUID, string uoUID, TransmissionUploadInvoiceRequest invoiceUploadRequest, string xAuthorization);

        /// <summary>
        /// Upload an xml\\xml.p7m invoice
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aooUID">Aoo unique identifier</param>
        /// <param name="uoUID">Uo unique identifier</param>
        /// <param name="invoiceUploadRequest">Invoice upload request</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>ApiResponse of TransmissionUploadInvoiceResponse</returns>
        ApiResponse<TransmissionUploadInvoiceResponse> TransmissionUploadInvoiceWithHttpInfo (Guid? aooUID, string uoUID, TransmissionUploadInvoiceRequest invoiceUploadRequest, string xAuthorization);
        /// <summary>
        /// Check the last uploaded invoice with an externalUID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aooUID">Aoo unique identifier</param>
        /// <param name="uoUID">Uo unique identifier</param>
        /// <param name="externalID">Invoice external unique identifier</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>RiTransmissionUploadInvoiceInfo</returns>
        RiTransmissionUploadInvoiceInfo TransmissionUploadInvoiceCheckLast (Guid? aooUID, string uoUID, string externalID, string xAuthorization);

        /// <summary>
        /// Check the last uploaded invoice with an externalUID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aooUID">Aoo unique identifier</param>
        /// <param name="uoUID">Uo unique identifier</param>
        /// <param name="externalID">Invoice external unique identifier</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>ApiResponse of RiTransmissionUploadInvoiceInfo</returns>
        ApiResponse<RiTransmissionUploadInvoiceInfo> TransmissionUploadInvoiceCheckLastWithHttpInfo (Guid? aooUID, string uoUID, string externalID, string xAuthorization);
        /// <summary>
        /// Get the last uploaded invoices
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aooUID">Aoo unique identifier</param>
        /// <param name="uoUID">Uo unique identifier</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>List&lt;RiTransmissionUploadInvoiceInfo&gt;</returns>
        List<RiTransmissionUploadInvoiceInfo> TransmissionUploadInvoiceLast (Guid? aooUID, string uoUID, string xAuthorization);

        /// <summary>
        /// Get the last uploaded invoices
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aooUID">Aoo unique identifier</param>
        /// <param name="uoUID">Uo unique identifier</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>ApiResponse of List&lt;RiTransmissionUploadInvoiceInfo&gt;</returns>
        ApiResponse<List<RiTransmissionUploadInvoiceInfo>> TransmissionUploadInvoiceLastWithHttpInfo (Guid? aooUID, string uoUID, string xAuthorization);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Upload an xml\\xml.p7m invoice
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aooUID">Aoo unique identifier</param>
        /// <param name="uoUID">Uo unique identifier</param>
        /// <param name="invoiceUploadRequest">Invoice upload request</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of TransmissionUploadInvoiceResponse</returns>
        System.Threading.Tasks.Task<TransmissionUploadInvoiceResponse> TransmissionUploadInvoiceAsync (Guid? aooUID, string uoUID, TransmissionUploadInvoiceRequest invoiceUploadRequest, string xAuthorization);

        /// <summary>
        /// Upload an xml\\xml.p7m invoice
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aooUID">Aoo unique identifier</param>
        /// <param name="uoUID">Uo unique identifier</param>
        /// <param name="invoiceUploadRequest">Invoice upload request</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of ApiResponse (TransmissionUploadInvoiceResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TransmissionUploadInvoiceResponse>> TransmissionUploadInvoiceAsyncWithHttpInfo (Guid? aooUID, string uoUID, TransmissionUploadInvoiceRequest invoiceUploadRequest, string xAuthorization);
        /// <summary>
        /// Check the last uploaded invoice with an externalUID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aooUID">Aoo unique identifier</param>
        /// <param name="uoUID">Uo unique identifier</param>
        /// <param name="externalID">Invoice external unique identifier</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of RiTransmissionUploadInvoiceInfo</returns>
        System.Threading.Tasks.Task<RiTransmissionUploadInvoiceInfo> TransmissionUploadInvoiceCheckLastAsync (Guid? aooUID, string uoUID, string externalID, string xAuthorization);

        /// <summary>
        /// Check the last uploaded invoice with an externalUID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aooUID">Aoo unique identifier</param>
        /// <param name="uoUID">Uo unique identifier</param>
        /// <param name="externalID">Invoice external unique identifier</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of ApiResponse (RiTransmissionUploadInvoiceInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<RiTransmissionUploadInvoiceInfo>> TransmissionUploadInvoiceCheckLastAsyncWithHttpInfo (Guid? aooUID, string uoUID, string externalID, string xAuthorization);
        /// <summary>
        /// Get the last uploaded invoices
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aooUID">Aoo unique identifier</param>
        /// <param name="uoUID">Uo unique identifier</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of List&lt;RiTransmissionUploadInvoiceInfo&gt;</returns>
        System.Threading.Tasks.Task<List<RiTransmissionUploadInvoiceInfo>> TransmissionUploadInvoiceLastAsync (Guid? aooUID, string uoUID, string xAuthorization);

        /// <summary>
        /// Get the last uploaded invoices
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aooUID">Aoo unique identifier</param>
        /// <param name="uoUID">Uo unique identifier</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of ApiResponse (List&lt;RiTransmissionUploadInvoiceInfo&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<RiTransmissionUploadInvoiceInfo>>> TransmissionUploadInvoiceLastAsyncWithHttpInfo (Guid? aooUID, string uoUID, string xAuthorization);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class TransmissionInvoicesUploadApi : ITransmissionInvoicesUploadApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="TransmissionInvoicesUploadApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TransmissionInvoicesUploadApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TransmissionInvoicesUploadApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public TransmissionInvoicesUploadApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Upload an xml\\xml.p7m invoice 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aooUID">Aoo unique identifier</param>
        /// <param name="uoUID">Uo unique identifier</param>
        /// <param name="invoiceUploadRequest">Invoice upload request</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>TransmissionUploadInvoiceResponse</returns>
        public TransmissionUploadInvoiceResponse TransmissionUploadInvoice (Guid? aooUID, string uoUID, TransmissionUploadInvoiceRequest invoiceUploadRequest, string xAuthorization)
        {
             ApiResponse<TransmissionUploadInvoiceResponse> localVarResponse = TransmissionUploadInvoiceWithHttpInfo(aooUID, uoUID, invoiceUploadRequest, xAuthorization);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Upload an xml\\xml.p7m invoice 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aooUID">Aoo unique identifier</param>
        /// <param name="uoUID">Uo unique identifier</param>
        /// <param name="invoiceUploadRequest">Invoice upload request</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>ApiResponse of TransmissionUploadInvoiceResponse</returns>
        public ApiResponse< TransmissionUploadInvoiceResponse > TransmissionUploadInvoiceWithHttpInfo (Guid? aooUID, string uoUID, TransmissionUploadInvoiceRequest invoiceUploadRequest, string xAuthorization)
        {
            // verify the required parameter 'aooUID' is set
            if (aooUID == null)
                throw new ApiException(400, "Missing required parameter 'aooUID' when calling TransmissionInvoicesUploadApi->TransmissionUploadInvoice");
            // verify the required parameter 'uoUID' is set
            if (uoUID == null)
                throw new ApiException(400, "Missing required parameter 'uoUID' when calling TransmissionInvoicesUploadApi->TransmissionUploadInvoice");
            // verify the required parameter 'invoiceUploadRequest' is set
            if (invoiceUploadRequest == null)
                throw new ApiException(400, "Missing required parameter 'invoiceUploadRequest' when calling TransmissionInvoicesUploadApi->TransmissionUploadInvoice");
            // verify the required parameter 'xAuthorization' is set
            if (xAuthorization == null)
                throw new ApiException(400, "Missing required parameter 'xAuthorization' when calling TransmissionInvoicesUploadApi->TransmissionUploadInvoice");

            var localVarPath = "/api/v3.1/transmission/upload/aoos/{aooUID}/uos/{uoUID}/invoices";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (aooUID != null) localVarPathParams.Add("aooUID", this.Configuration.ApiClient.ParameterToString(aooUID)); // path parameter
            if (uoUID != null) localVarPathParams.Add("uoUID", this.Configuration.ApiClient.ParameterToString(uoUID)); // path parameter
            if (xAuthorization != null) localVarHeaderParams.Add("X-Authorization", this.Configuration.ApiClient.ParameterToString(xAuthorization)); // header parameter
            if (invoiceUploadRequest != null && invoiceUploadRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(invoiceUploadRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = invoiceUploadRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TransmissionUploadInvoice", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TransmissionUploadInvoiceResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TransmissionUploadInvoiceResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TransmissionUploadInvoiceResponse)));
        }

        /// <summary>
        /// Upload an xml\\xml.p7m invoice 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aooUID">Aoo unique identifier</param>
        /// <param name="uoUID">Uo unique identifier</param>
        /// <param name="invoiceUploadRequest">Invoice upload request</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of TransmissionUploadInvoiceResponse</returns>
        public async System.Threading.Tasks.Task<TransmissionUploadInvoiceResponse> TransmissionUploadInvoiceAsync (Guid? aooUID, string uoUID, TransmissionUploadInvoiceRequest invoiceUploadRequest, string xAuthorization)
        {
             ApiResponse<TransmissionUploadInvoiceResponse> localVarResponse = await TransmissionUploadInvoiceAsyncWithHttpInfo(aooUID, uoUID, invoiceUploadRequest, xAuthorization);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Upload an xml\\xml.p7m invoice 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aooUID">Aoo unique identifier</param>
        /// <param name="uoUID">Uo unique identifier</param>
        /// <param name="invoiceUploadRequest">Invoice upload request</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of ApiResponse (TransmissionUploadInvoiceResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TransmissionUploadInvoiceResponse>> TransmissionUploadInvoiceAsyncWithHttpInfo (Guid? aooUID, string uoUID, TransmissionUploadInvoiceRequest invoiceUploadRequest, string xAuthorization)
        {
            // verify the required parameter 'aooUID' is set
            if (aooUID == null)
                throw new ApiException(400, "Missing required parameter 'aooUID' when calling TransmissionInvoicesUploadApi->TransmissionUploadInvoice");
            // verify the required parameter 'uoUID' is set
            if (uoUID == null)
                throw new ApiException(400, "Missing required parameter 'uoUID' when calling TransmissionInvoicesUploadApi->TransmissionUploadInvoice");
            // verify the required parameter 'invoiceUploadRequest' is set
            if (invoiceUploadRequest == null)
                throw new ApiException(400, "Missing required parameter 'invoiceUploadRequest' when calling TransmissionInvoicesUploadApi->TransmissionUploadInvoice");
            // verify the required parameter 'xAuthorization' is set
            if (xAuthorization == null)
                throw new ApiException(400, "Missing required parameter 'xAuthorization' when calling TransmissionInvoicesUploadApi->TransmissionUploadInvoice");

            var localVarPath = "/api/v3.1/transmission/upload/aoos/{aooUID}/uos/{uoUID}/invoices";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (aooUID != null) localVarPathParams.Add("aooUID", this.Configuration.ApiClient.ParameterToString(aooUID)); // path parameter
            if (uoUID != null) localVarPathParams.Add("uoUID", this.Configuration.ApiClient.ParameterToString(uoUID)); // path parameter
            if (xAuthorization != null) localVarHeaderParams.Add("X-Authorization", this.Configuration.ApiClient.ParameterToString(xAuthorization)); // header parameter
            if (invoiceUploadRequest != null && invoiceUploadRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(invoiceUploadRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = invoiceUploadRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TransmissionUploadInvoice", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TransmissionUploadInvoiceResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TransmissionUploadInvoiceResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TransmissionUploadInvoiceResponse)));
        }

        /// <summary>
        /// Check the last uploaded invoice with an externalUID 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aooUID">Aoo unique identifier</param>
        /// <param name="uoUID">Uo unique identifier</param>
        /// <param name="externalID">Invoice external unique identifier</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>RiTransmissionUploadInvoiceInfo</returns>
        public RiTransmissionUploadInvoiceInfo TransmissionUploadInvoiceCheckLast (Guid? aooUID, string uoUID, string externalID, string xAuthorization)
        {
             ApiResponse<RiTransmissionUploadInvoiceInfo> localVarResponse = TransmissionUploadInvoiceCheckLastWithHttpInfo(aooUID, uoUID, externalID, xAuthorization);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Check the last uploaded invoice with an externalUID 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aooUID">Aoo unique identifier</param>
        /// <param name="uoUID">Uo unique identifier</param>
        /// <param name="externalID">Invoice external unique identifier</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>ApiResponse of RiTransmissionUploadInvoiceInfo</returns>
        public ApiResponse< RiTransmissionUploadInvoiceInfo > TransmissionUploadInvoiceCheckLastWithHttpInfo (Guid? aooUID, string uoUID, string externalID, string xAuthorization)
        {
            // verify the required parameter 'aooUID' is set
            if (aooUID == null)
                throw new ApiException(400, "Missing required parameter 'aooUID' when calling TransmissionInvoicesUploadApi->TransmissionUploadInvoiceCheckLast");
            // verify the required parameter 'uoUID' is set
            if (uoUID == null)
                throw new ApiException(400, "Missing required parameter 'uoUID' when calling TransmissionInvoicesUploadApi->TransmissionUploadInvoiceCheckLast");
            // verify the required parameter 'externalID' is set
            if (externalID == null)
                throw new ApiException(400, "Missing required parameter 'externalID' when calling TransmissionInvoicesUploadApi->TransmissionUploadInvoiceCheckLast");
            // verify the required parameter 'xAuthorization' is set
            if (xAuthorization == null)
                throw new ApiException(400, "Missing required parameter 'xAuthorization' when calling TransmissionInvoicesUploadApi->TransmissionUploadInvoiceCheckLast");

            var localVarPath = "/api/v3.1/transmission/upload/aoos/{aooUID}/uos/{uoUID}/invoices/check-last";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (aooUID != null) localVarPathParams.Add("aooUID", this.Configuration.ApiClient.ParameterToString(aooUID)); // path parameter
            if (uoUID != null) localVarPathParams.Add("uoUID", this.Configuration.ApiClient.ParameterToString(uoUID)); // path parameter
            if (externalID != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "externalID", externalID)); // query parameter
            if (xAuthorization != null) localVarHeaderParams.Add("X-Authorization", this.Configuration.ApiClient.ParameterToString(xAuthorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TransmissionUploadInvoiceCheckLast", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RiTransmissionUploadInvoiceInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RiTransmissionUploadInvoiceInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RiTransmissionUploadInvoiceInfo)));
        }

        /// <summary>
        /// Check the last uploaded invoice with an externalUID 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aooUID">Aoo unique identifier</param>
        /// <param name="uoUID">Uo unique identifier</param>
        /// <param name="externalID">Invoice external unique identifier</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of RiTransmissionUploadInvoiceInfo</returns>
        public async System.Threading.Tasks.Task<RiTransmissionUploadInvoiceInfo> TransmissionUploadInvoiceCheckLastAsync (Guid? aooUID, string uoUID, string externalID, string xAuthorization)
        {
             ApiResponse<RiTransmissionUploadInvoiceInfo> localVarResponse = await TransmissionUploadInvoiceCheckLastAsyncWithHttpInfo(aooUID, uoUID, externalID, xAuthorization);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Check the last uploaded invoice with an externalUID 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aooUID">Aoo unique identifier</param>
        /// <param name="uoUID">Uo unique identifier</param>
        /// <param name="externalID">Invoice external unique identifier</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of ApiResponse (RiTransmissionUploadInvoiceInfo)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RiTransmissionUploadInvoiceInfo>> TransmissionUploadInvoiceCheckLastAsyncWithHttpInfo (Guid? aooUID, string uoUID, string externalID, string xAuthorization)
        {
            // verify the required parameter 'aooUID' is set
            if (aooUID == null)
                throw new ApiException(400, "Missing required parameter 'aooUID' when calling TransmissionInvoicesUploadApi->TransmissionUploadInvoiceCheckLast");
            // verify the required parameter 'uoUID' is set
            if (uoUID == null)
                throw new ApiException(400, "Missing required parameter 'uoUID' when calling TransmissionInvoicesUploadApi->TransmissionUploadInvoiceCheckLast");
            // verify the required parameter 'externalID' is set
            if (externalID == null)
                throw new ApiException(400, "Missing required parameter 'externalID' when calling TransmissionInvoicesUploadApi->TransmissionUploadInvoiceCheckLast");
            // verify the required parameter 'xAuthorization' is set
            if (xAuthorization == null)
                throw new ApiException(400, "Missing required parameter 'xAuthorization' when calling TransmissionInvoicesUploadApi->TransmissionUploadInvoiceCheckLast");

            var localVarPath = "/api/v3.1/transmission/upload/aoos/{aooUID}/uos/{uoUID}/invoices/check-last";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (aooUID != null) localVarPathParams.Add("aooUID", this.Configuration.ApiClient.ParameterToString(aooUID)); // path parameter
            if (uoUID != null) localVarPathParams.Add("uoUID", this.Configuration.ApiClient.ParameterToString(uoUID)); // path parameter
            if (externalID != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "externalID", externalID)); // query parameter
            if (xAuthorization != null) localVarHeaderParams.Add("X-Authorization", this.Configuration.ApiClient.ParameterToString(xAuthorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TransmissionUploadInvoiceCheckLast", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RiTransmissionUploadInvoiceInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RiTransmissionUploadInvoiceInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RiTransmissionUploadInvoiceInfo)));
        }

        /// <summary>
        /// Get the last uploaded invoices 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aooUID">Aoo unique identifier</param>
        /// <param name="uoUID">Uo unique identifier</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>List&lt;RiTransmissionUploadInvoiceInfo&gt;</returns>
        public List<RiTransmissionUploadInvoiceInfo> TransmissionUploadInvoiceLast (Guid? aooUID, string uoUID, string xAuthorization)
        {
             ApiResponse<List<RiTransmissionUploadInvoiceInfo>> localVarResponse = TransmissionUploadInvoiceLastWithHttpInfo(aooUID, uoUID, xAuthorization);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the last uploaded invoices 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aooUID">Aoo unique identifier</param>
        /// <param name="uoUID">Uo unique identifier</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>ApiResponse of List&lt;RiTransmissionUploadInvoiceInfo&gt;</returns>
        public ApiResponse< List<RiTransmissionUploadInvoiceInfo> > TransmissionUploadInvoiceLastWithHttpInfo (Guid? aooUID, string uoUID, string xAuthorization)
        {
            // verify the required parameter 'aooUID' is set
            if (aooUID == null)
                throw new ApiException(400, "Missing required parameter 'aooUID' when calling TransmissionInvoicesUploadApi->TransmissionUploadInvoiceLast");
            // verify the required parameter 'uoUID' is set
            if (uoUID == null)
                throw new ApiException(400, "Missing required parameter 'uoUID' when calling TransmissionInvoicesUploadApi->TransmissionUploadInvoiceLast");
            // verify the required parameter 'xAuthorization' is set
            if (xAuthorization == null)
                throw new ApiException(400, "Missing required parameter 'xAuthorization' when calling TransmissionInvoicesUploadApi->TransmissionUploadInvoiceLast");

            var localVarPath = "/api/v3.1/transmission/upload/aoos/{aooUID}/uos/{uoUID}/invoices/last";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (aooUID != null) localVarPathParams.Add("aooUID", this.Configuration.ApiClient.ParameterToString(aooUID)); // path parameter
            if (uoUID != null) localVarPathParams.Add("uoUID", this.Configuration.ApiClient.ParameterToString(uoUID)); // path parameter
            if (xAuthorization != null) localVarHeaderParams.Add("X-Authorization", this.Configuration.ApiClient.ParameterToString(xAuthorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TransmissionUploadInvoiceLast", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<RiTransmissionUploadInvoiceInfo>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<RiTransmissionUploadInvoiceInfo>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<RiTransmissionUploadInvoiceInfo>)));
        }

        /// <summary>
        /// Get the last uploaded invoices 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aooUID">Aoo unique identifier</param>
        /// <param name="uoUID">Uo unique identifier</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of List&lt;RiTransmissionUploadInvoiceInfo&gt;</returns>
        public async System.Threading.Tasks.Task<List<RiTransmissionUploadInvoiceInfo>> TransmissionUploadInvoiceLastAsync (Guid? aooUID, string uoUID, string xAuthorization)
        {
             ApiResponse<List<RiTransmissionUploadInvoiceInfo>> localVarResponse = await TransmissionUploadInvoiceLastAsyncWithHttpInfo(aooUID, uoUID, xAuthorization);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the last uploaded invoices 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aooUID">Aoo unique identifier</param>
        /// <param name="uoUID">Uo unique identifier</param>
        /// <param name="xAuthorization">access_token</param>
        /// <returns>Task of ApiResponse (List&lt;RiTransmissionUploadInvoiceInfo&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<RiTransmissionUploadInvoiceInfo>>> TransmissionUploadInvoiceLastAsyncWithHttpInfo (Guid? aooUID, string uoUID, string xAuthorization)
        {
            // verify the required parameter 'aooUID' is set
            if (aooUID == null)
                throw new ApiException(400, "Missing required parameter 'aooUID' when calling TransmissionInvoicesUploadApi->TransmissionUploadInvoiceLast");
            // verify the required parameter 'uoUID' is set
            if (uoUID == null)
                throw new ApiException(400, "Missing required parameter 'uoUID' when calling TransmissionInvoicesUploadApi->TransmissionUploadInvoiceLast");
            // verify the required parameter 'xAuthorization' is set
            if (xAuthorization == null)
                throw new ApiException(400, "Missing required parameter 'xAuthorization' when calling TransmissionInvoicesUploadApi->TransmissionUploadInvoiceLast");

            var localVarPath = "/api/v3.1/transmission/upload/aoos/{aooUID}/uos/{uoUID}/invoices/last";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (aooUID != null) localVarPathParams.Add("aooUID", this.Configuration.ApiClient.ParameterToString(aooUID)); // path parameter
            if (uoUID != null) localVarPathParams.Add("uoUID", this.Configuration.ApiClient.ParameterToString(uoUID)); // path parameter
            if (xAuthorization != null) localVarHeaderParams.Add("X-Authorization", this.Configuration.ApiClient.ParameterToString(xAuthorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TransmissionUploadInvoiceLast", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<RiTransmissionUploadInvoiceInfo>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<RiTransmissionUploadInvoiceInfo>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<RiTransmissionUploadInvoiceInfo>)));
        }

    }
}
